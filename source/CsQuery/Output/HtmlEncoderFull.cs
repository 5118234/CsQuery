using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace CsQuery.Output
{

    /// <summary>
    /// Full HTML encoder. All entities with known HTML codes are parsed; everything above 160
    /// becomes an HTML numeric-coded entity.
    /// </summary>

    public class HtmlEncoderFull: HtmlEncoderBasic
    {
        /// <summary>
        /// Default constructor.
        /// </summary>

        public HtmlEncoderFull(): base()
        {


        }

        static HtmlEncoderFull() {
            HtmlEntityMap = new Dictionary<char, string>();
            PopulateHtmlEntityMap();
        }

        static IDictionary<char, string> HtmlEntityMap;

        static uint[] codedValues = new uint[] {
            34,
            38,39,
            60,61,
            160,
            161,162,163,164,165,166,167,168,169,
            170,171,172,173,174,175,176,177,178,179,
            180,181,182,183,184,185,186,187,188,189,
            190,191,192,193,194,195,196,197,198,199,
            200,201,202,203,204,205,206,207,208,209,
            210,211,212,213,214,215,216,217,218,219,
            220,221,222,223,224,225,226,227,228,229,
            230,231,232,233,234,235,236,237,238,239,
            240,241,242,243,244,245,246,247,248,249,
            250,251,252,253,254,255,256,257,258,259,
            260,261,262,263,264,265,266,267,268,269,
            270,271,272,273,274,275,
            278,279,
            280,281,282,283,284,285,286,287,288,289,
            290,
            292,293,294,295,296,297,298,299,
            302,303,304,305,306,307,308,309,
            310,311,312,313,314,315,316,317,318,319,
            320,321,322,323,324,325,326,327,328,329,
            330,331,332,333,
            336,337,338,339,
            340,341,342,343,344,345,346,347,348,349,
            350,351,352,353,354,355,356,357,358,359,
            360,361,362,363,364,365,366,367,368,369,
            370,371,372,373,374,375,376,377,378,379,
            380,381,382,
            402,
            437,
            501,
            567,
            710,711,
            728,729,
            730,731,732,733,
            913,914,915,916,917,918,919,
            920,921,922,923,924,925,926,927,928,929,
            931,932,933,934,935,936,937,
            945,946,947,948,949,
            950,951,952,953,954,955,956,957,958,959,
            960,961,962,963,964,965,966,967,968,969,
            977,978,
            981,982,
            988,989,
            1008,1009,
            1013,1014,
            1025,1026,1027,1028,1029,
            1030,1031,1032,1033,1034,1035,1036,
            1038,1039,
            1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,
            1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,
            1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,
            1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,
            1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,
            1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,
            1100,1101,1102,1103,
            1105,1106,1107,1108,1109,
            1110,1111,1112,1113,1114,1115,1116,
            1118,1119,
            8194,8195,8196,8197,
            8199,
            8200,8201,8202,8203,8204,8205,8206,8207,8208,
            8211,8212,8213,8214,
            8216,8217,8218,
            8220,8221,8222,
            8224,8225,8226,
            8229,
            8230,
            8240,8241,8242,8243,8244,8245,
            8249,
            8250,
            8254,
            8257,
            8259,
            8260,
            8271,
            8279,
            8287,8288,8289,
            8290,8291,
            8364,
            8450,
            8453,
            8458,8459,
            8460,8461,8462,8463,8464,8465,8466,8467,
            8469,
            8470,8471,8472,8473,8474,8475,8476,8477,8478,
            8482,
            8484,
            8487,8488,8489,
            8492,8493,
            8495,8496,8497,
            8499,
            8500,8501,8502,8503,8504,
            8517,8518,8519,
            8520,
            8531,8532,8533,8534,8535,8536,8537,8538,8539,
            8540,8541,8542,
            8592,8593,8594,8595,8596,8597,8598,8599,
            8600,8601,8602,8603,
            8605,8606,8607,8608,8609,
            8610,8611,8612,8613,8614,8615,
            8617,8618,8619,
            8620,8621,8622,
            8624,8625,8626,8627,
            8629,
            8630,8631,
            8634,8635,8636,8637,8638,8639,
            8640,8641,8642,8643,8644,8645,8646,8647,8648,8649,
            8650,8651,8652,8653,8654,8655,8656,8657,8658,8659,
            8660,8661,8662,8663,8664,8665,8666,8667,
            8669,
            8676,8677,
            8693,
            8701,8702,8703,8704,8705,8706,8707,8708,8709,
            8711,8712,8713,
            8715,8716,
            8719,
            8720,8721,8722,8723,8724,
            8726,8727,8728,
            8730,
            8733,8734,8735,8736,8737,8738,8739,
            8740,8741,8742,8743,8744,8745,8746,8747,8748,8749,
            8750,8751,8752,8753,8754,8755,8756,8757,8758,8759,
            8760,
            8762,8763,8764,8765,8766,8767,8768,8769,
            8770,8771,8772,8773,8774,8775,8776,8777,8778,8779,
            8780,8781,8782,8783,8784,8785,8786,8787,8788,8789,
            8790,8791,
            8793,8794,
            8796,
            8799,
            8800,8801,8802,
            8804,8805,8806,8807,8808,8809,
            8810,8811,8812,8813,8814,8815,8816,8817,8818,8819,
            8820,8821,8822,8823,8824,8825,8826,8827,8828,8829,
            8830,8831,8832,8833,8834,8835,8836,8837,8838,8839,
            8840,8841,8842,8843,
            8845,8846,8847,8848,8849,
            8850,8851,8852,8853,8854,8855,8856,8857,8858,8859,
            8861,8862,8863,8864,8865,8866,8867,8868,8869,
            8871,8872,8873,8874,8875,8876,8877,8878,8879,
            8880,
            8882,8883,8884,8885,8886,8887,8888,8889,
            8890,8891,
            8893,8894,8895,8896,8897,8898,8899,
            8900,8901,8902,8903,8904,8905,8906,8907,8908,8909,
            8910,8911,8912,8913,8914,8915,8916,8917,8918,8919,
            8920,8921,8922,8923,
            8926,8927,8928,8929,
            8930,8931,
            8934,8935,8936,8937,8938,8939,
            8940,8941,8942,8943,8944,8945,8946,8947,8948,8949,
            8950,8951,
            8953,8954,8955,8956,8957,8958,
            8965,8966,
            8968,8969,
            8970,8971,8972,8973,8974,8975,8976,
            8978,8979,
            8981,8982,
            8988,8989,
            8990,8991,
            8994,8995,
            9005,9006,
            9014,
            9021,
            9023,
            9084,
            9136,9137,
            9140,9141,9142,
            9180,9181,9182,9183,
            9186,
            9191,
            9251,
            9416,
            9472,
            9474,
            9484,
            9488,
            9492,
            9496,
            9500,
            9508,
            9516,
            9524,
            9532,
            9552,9553,9554,9555,9556,9557,9558,9559,
            9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,
            9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,
            9580,
            9600,
            9604,
            9608,
            9617,9618,9619,
            9633,
            9642,9643,
            9645,9646,
            9649,
            9651,9652,9653,
            9656,9657,
            9661,9662,9663,
            9666,9667,
            9674,9675,
            9708,
            9711,
            9720,9721,9722,9723,9724,
            9733,9734,
            9742,
            9792,
            9794,
            9824,
            9827,
            9829,
            9830,
            9834,
            9837,9838,9839,
            10003,
            10007,
            10016,
            10038,
            10072,
            10098,10099,
            10184,10185,
            10214,10215,10216,10217,10218,10219,
            10220,10221,
            10229,
            10230,10231,10232,10233,10234,
            10236,
            10239,
            10498,10499,
            10500,10501,
            10508,10509,
            10510,10511,10512,10513,10514,10515,
            10518,
            10521,10522,10523,10524,10525,10526,10527,10528,
            10531,10532,10533,10534,10535,10536,10537,10538,
            10547,
            10549,
            10550,10551,10552,10553,
            10556,10557,
            10565,
            10568,10569,
            10570,10571,
            10574,10575,10576,10577,10578,10579,
            10580,10581,10582,10583,10584,10585,10586,10587,10588,10589,
            10590,10591,10592,10593,10594,10595,10596,10597,10598,10599,
            10600,10601,10602,10603,10604,10605,10606,10607,10608,10609,
            10610,10611,10612,10613,10614,
            10616,10617,
            10619,
            10620,10621,10622,10623,
            10629,
            10630,
            10635,10636,10637,10638,10639,
            10640,10641,10642,10643,10644,10645,10646,
            10650,
            10652,10653,
            10660,10661,10662,10663,10664,10665,10666,10667,10668,10669,
            10670,10671,10672,10673,10674,10675,10676,10677,10678,10679,
            10681,
            10683,10684,
            10686,10687,10688,10689,
            10690,10691,10692,10693,
            10697,
            10701,10702,10703,10704,
            10716,10717,10718,
            10723,10724,10725,
            10731,
            10740,
            10742,
            10752,10753,10754,
            10756,
            10758,
            10764,10765,
            10768,10769,
            10770,10771,10772,10773,10774,10775,
            10786,10787,10788,10789,
            10790,10791,
            10793,10794,
            10797,10798,10799,
            10800,10801,
            10803,10804,10805,10806,10807,10808,10809,
            10810,10811,10812,
            10815,10816,
            10818,10819,
            10820,10821,10822,10823,10824,10825,10826,10827,10828,10829,
            10832,
            10835,10836,10837,10838,10839,
            10840,
            10842,10843,10844,10845,
            10847,
            10854,
            10858,
            10861,10862,10863,10864,10865,10866,10867,10868,10869,
            10871,10872,10873,10874,10875,10876,10877,10878,10879,
            10880,10881,10882,10883,10884,10885,10886,10887,10888,10889,
            10890,10891,10892,10893,10894,10895,10896,10897,10898,10899,
            10900,10901,10902,10903,10904,10905,10906,
            10909,
            10910,10911,10912,10913,10914,
            10916,10917,10918,10919,
            10920,10921,10922,10923,10924,10925,10926,10927,10928,
            10931,10932,10933,10934,10935,10936,10937,10938,10939,
            10940,10941,10942,10943,10944,10945,10946,10947,10948,10949,
            10950,10951,10952,
            10955,10956,
            10959,
            10960,10961,10962,10963,10964,10965,10966,10967,10968,10969,
            10970,10971,
            10980,
            10982,10983,10984,10985,
            10987,10988,10989,
            10990,10991,10992,10993,10994,10995,
            11005,
            64256,64257,64258,64259,
            64260,
            119964,
            119966,119967,
            119970,
            119973,119974,
            119977,119978,119979,
            119980,
            119982,119983,119984,119985,119986,119987,119988,119989,
            119990,119991,119992,119993,
            119995,
            119997,119998,119999,
            120000,120001,120002,120003,
            120005,120006,120007,120008,120009,
            120010,120011,120012,120013,120014,120015,
            120068,120069,
            120071,120072,120073,120074,
            120077,120078,120079,
            120080,120081,120082,120083,120084,
            120086,120087,120088,120089,
            120090,120091,120092,
            120094,120095,120096,120097,120098,120099,
            120100,120101,120102,120103,120104,120105,120106,120107,120108,120109,
            120110,120111,120112,120113,120114,120115,120116,120117,120118,120119,
            120120,120121,
            120123,120124,120125,120126,
            120128,120129,
            120130,120131,120132,
            120134,
            120138,120139,
            120140,120141,120142,120143,120144,
            120146,120147,120148,120149,
            120150,120151,120152,120153,120154,120155,120156,120157,120158,120159,
            120160,120161,120162,120163,120164,120165,120166,120167,120168,120169,
            120170,120171,
            9676785,
            96768411,96768412

        };

        static string[] codedEntities = new string[] {
            /* 34 */  "quot",
            /* 38 */  "amp","apos",
            /* 60 */  "lt","gt",
            /* 160 */ "nbsp",
             /* 161 */ "iexcl","cent","pound","curren","yen","brvbar","sect","die","COPY",
             /* 170 */ "ordf","laquo","not","shy","circledR","macr","deg","PlusMinus","sup2","sup3",
             /* 180 */ "acute","micro","para","CenterDot","cedil","sup1","ordm","raquo","frac14","frac12",
             /* 190 */ "frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","angst","AElig","Ccedil",
             /* 200 */ "Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde",
             /* 210 */ "Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc",
             /* 220 */ "Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring",
             /* 230 */ "aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml",
             /* 240 */ "eth","ntilde","ograve","oacute","ocirc","otilde","ouml","div","oslash","ugrave",
             /* 250 */ "uacute","ucirc","uuml","yacute","thorn","yuml","Amacr","amacr","Abreve","abreve",
             /* 260 */ "Aogon","aogon","Cacute","cacute","Ccirc","ccirc","Cdot","cdot","Ccaron","ccaron",
             /* 270 */ "Dcaron","dcaron","Dstrok","dstrok","Emacr","emacr",
             /* 278 */ "Edot","edot",
             /* 280 */ "Eogon","eogon","Ecaron","ecaron","Gcirc","gcirc","Gbreve","gbreve","Gdot","gdot",
             /* 290 */ "Gcedil",
             /* 292 */ "Hcirc","hcirc","Hstrok","hstrok","Itilde","itilde","Imacr","imacr",
             /* 302 */ "Iogon","iogon","Idot","imath","IJlig","ijlig","Jcirc","jcirc",
             /* 310 */ "Kcedil","kcedil","kgreen","Lacute","lacute","Lcedil","lcedil","Lcaron","lcaron","Lmidot",
             /* 320 */ "lmidot","Lstrok","lstrok","Nacute","nacute","Ncedil","ncedil","Ncaron","ncaron","napos",
             /* 330 */ "ENG","eng","Omacr","omacr",
             /* 336 */ "Odblac","odblac","OElig","oelig",
             /* 340 */ "Racute","racute","Rcedil","rcedil","Rcaron","rcaron","Sacute","sacute","Scirc","scirc",
             /* 350 */ "Scedil","scedil","Scaron","scaron","Tcedil","tcedil","Tcaron","tcaron","Tstrok","tstrok",
             /* 360 */ "Utilde","utilde","Umacr","umacr","Ubreve","ubreve","Uring","uring","Udblac","udblac",
             /* 370 */ "Uogon","uogon","Wcirc","wcirc","Ycirc","ycirc","Yuml","Zacute","zacute","Zdot",
             /* 380 */ "zdot","Zcaron","zcaron",
             /* 402 */ "fnof",
             /* 437 */ "imped",
             /* 501 */ "gacute",
             /* 567 */ "jmath",
             /* 710 */ "circ","caron",
             /* 728 */ "Breve","DiacriticalDot",
             /* 730 */ "ring","ogon","DiacriticalTilde","dblac",
             /* 913 */ "Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta",
             /* 920 */ "Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho",
             /* 931 */ "Sigma","Tau","Upsilon","Phi","Chi","Psi","ohm",
             /* 945 */ "alpha","beta","gamma","delta","epsi",
             /* 950 */ "zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron",
             /* 960 */ "pi","rho","sigmaf","sigma","tau","upsi","phi","chi","psi","omega",
             /* 977 */ "thetasym","Upsi",
             /* 981 */ "phiv","piv",
             /* 988 */ "Gammad","digamma",
             /* 1008 */ "kappav","rhov",
             /* 1013 */ "epsiv","backepsilon",
             /* 1025 */ "IOcy","DJcy","GJcy","Jukcy","DScy",
             /* 1030 */ "Iukcy","YIcy","Jsercy","LJcy","NJcy","TSHcy","KJcy",
             /* 1038 */ "Ubrcy","DZcy",
             /* 1040 */ "Acy","Bcy","Vcy","Gcy","Dcy","IEcy","ZHcy","Zcy","Icy","Jcy",
             /* 1050 */ "Kcy","Lcy","Mcy","Ncy","Ocy","Pcy","Rcy","Scy","Tcy","Ucy",
             /* 1060 */ "Fcy","KHcy","TScy","CHcy","SHcy","SHCHcy","HARDcy","Ycy","SOFTcy","Ecy",
             /* 1070 */ "YUcy","YAcy","acy","bcy","vcy","gcy","dcy","iecy","zhcy","zcy",
             /* 1080 */ "icy","jcy","kcy","lcy","mcy","ncy","ocy","pcy","rcy","scy",
             /* 1090 */ "tcy","ucy","fcy","khcy","tscy","chcy","shcy","shchcy","hardcy","ycy",
             /* 1100 */ "softcy","ecy","yucy","yacy",
             /* 1105 */ "iocy","djcy","gjcy","jukcy","dscy",
             /* 1110 */ "iukcy","yicy","jsercy","ljcy","njcy","tshcy","kjcy",
             /* 1118 */ "ubrcy","dzcy",
             /* 8194 */ "ensp","emsp","emsp13","emsp14",
             /* 8199 */ "numsp",
             /* 8200 */ "puncsp","thinsp","hairsp","NegativeMediumSpace","zwnj","zwj","lrm","rlm","dash",
             /* 8211 */ "ndash","mdash","horbar","Verbar",
             /* 8216 */ "lsquo","CloseCurlyQuote","lsquor",
             /* 8220 */ "ldquo","CloseCurlyDoubleQuote","bdquo",
             /* 8224 */ "dagger","Dagger","bull",
             /* 8229 */ "nldr",
             /* 8230 */ "hellip",
             /* 8240 */ "permil","pertenk","prime","Prime","tprime","backprime",
             /* 8249 */ "lsaquo",
             /* 8250 */ "rsaquo",
             /* 8254 */ "oline",
             /* 8257 */ "caret",
             /* 8259 */ "hybull",
             /* 8260 */ "frasl",
             /* 8271 */ "bsemi",
             /* 8279 */ "qprime",
             /* 8287 */ "MediumSpace","NoBreak","af",
             /* 8290 */ "InvisibleTimes","ic",
             /* 8364 */ "euro",
             /* 8450 */ "complexes",
             /* 8453 */ "incare",
             /* 8458 */ "gscr","hamilt",
             /* 8460 */ "Hfr","Hopf","planckh","hbar","imagline","Ifr","lagran","ell",
             /* 8469 */ "naturals",
             /* 8470 */ "numero","copysr","weierp","Popf","Qopf","realine","Re","reals","rx",
             /* 8482 */ "TRADE",
             /* 8484 */ "integers",
             /* 8487 */ "mho","zeetrf","iiota",
             /* 8492 */ "bernou","Cayleys",
             /* 8495 */ "escr","Escr","Fouriertrf",
             /* 8499 */ "Mellintrf",
             /* 8500 */ "order","alefsym","beth","gimel","daleth",
             /* 8517 */ "CapitalDifferentialD","dd","ee",
             /* 8520 */ "ii",
             /* 8531 */ "frac13","frac23","frac15","frac25","frac35","frac45","frac16","frac56","frac18",
             /* 8540 */ "frac38","frac58","frac78",
             /* 8592 */ "larr","ShortUpArrow","rarr","darr","harr","UpDownArrow","nwarr","nearr",
             /* 8600 */ "LowerRightArrow","LowerLeftArrow","nlarr","nrarr",
             /* 8605 */ "rarrw","Larr","Uarr","Rarr","Darr",
             /* 8610 */ "larrtl","rarrtl","LeftTeeArrow","mapstoup","map","DownTeeArrow",
             /* 8617 */ "hookleftarrow","hookrightarrow","larrlp",
             /* 8620 */ "looparrowright","harrw","nharr",
             /* 8624 */ "Lsh","Rsh","ldsh","rdsh",
             /* 8629 */ "crarr",
             /* 8630 */ "cularr","curarr",
             /* 8634 */ "circlearrowleft","circlearrowright","leftharpoonup","DownLeftVector","RightUpVector","LeftUpVector",
             /* 8640 */ "rharu","DownRightVector","dharr","dharl","RightArrowLeftArrow","udarr","LeftArrowRightArrow","leftleftarrows","upuparrows","rightrightarrows",
             /* 8650 */ "ddarr","leftrightharpoons","Equilibrium","nlArr","nhArr","nrArr","DoubleLeftArrow","DoubleUpArrow","DoubleRightArrow","dArr",
             /* 8660 */ "DoubleLeftRightArrow","DoubleUpDownArrow","nwArr","neArr","seArr","swArr","lAarr","rAarr",
             /* 8669 */ "zigrarr",
             /* 8676 */ "larrb","rarrb",
             /* 8693 */ "DownArrowUpArrow",
             /* 8701 */ "loarr","roarr","hoarr","ForAll","comp","part","exist","nexist","empty",
             /* 8711 */ "Del","Element","NotElement",
             /* 8715 */ "ni","notni",
             /* 8719 */ "prod",
             /* 8720 */ "coprod","Sum","minus","MinusPlus","dotplus",
             /* 8726 */ "Backslash","lowast","compfn",
             /* 8730 */ "radic",
             /* 8733 */ "prop","infin","angrt","ang","angmsd","angsph","mid",
             /* 8740 */ "nmid","DoubleVerticalBar","NotDoubleVerticalBar","and","or","cap","cup","int","Int","iiint",
             /* 8750 */ "conint","Conint","Cconint","cwint","ClockwiseContourIntegral","awconint","there4","becaus","ratio","Colon",
             /* 8760 */ "dotminus",
             /* 8762 */ "mDDot","homtht","sim","backsim","ac","acd","VerticalTilde","NotTilde",
             /* 8770 */ "eqsim","sime","NotTildeEqual","cong","simne","ncong","ap","nap","ape","apid",
             /* 8780 */ "backcong","asympeq","bump","bumpe","doteq","doteqdot","efDot","erDot","Assign","ecolon",
             /* 8790 */ "ecir","circeq",
             /* 8793 */ "wedgeq","veeeq",
             /* 8796 */ "triangleq",
             /* 8799 */ "equest",
             /* 8800 */ "ne","Congruent","nequiv",
             /* 8804 */ "le","ge","lE","gE","lnE","gnE",
             /* 8810 */ "ll","gg","between","NotCupCap","nless","ngt","nle","nge","lesssim","GreaterTilde",
             /* 8820 */ "nlsim","ngsim","LessGreater","gl","NotLessGreater","NotGreaterLess","pr","sc","prcue","sccue",
             /* 8830 */ "PrecedesTilde","scsim","NotPrecedes","NotSucceeds","sub","sup","nsub","nsup","sube","supe",
             /* 8840 */ "NotSubsetEqual","NotSupersetEqual","subne","supne",
             /* 8845 */ "cupdot","UnionPlus","sqsub","sqsup","sqsube",
             /* 8850 */ "sqsupe","sqcap","sqcup","CirclePlus","CircleMinus","CircleTimes","osol","CircleDot","circledcirc","circledast",
             /* 8861 */ "circleddash","boxplus","boxminus","boxtimes","dotsquare","RightTee","dashv","DownTee","bot",
             /* 8871 */ "models","DoubleRightTee","Vdash","Vvdash","VDash","nvdash","nvDash","nVdash","nVDash",
             /* 8880 */ "prurel",
             /* 8882 */ "LeftTriangle","RightTriangle","LeftTriangleEqual","RightTriangleEqual","origof","imof","multimap","hercon",
             /* 8890 */ "intcal","veebar",
             /* 8893 */ "barvee","angrtvb","lrtri","bigwedge","bigvee","bigcap","bigcup",
             /* 8900 */ "diam","sdot","sstarf","divideontimes","bowtie","ltimes","rtimes","leftthreetimes","rightthreetimes","backsimeq",
             /* 8910 */ "curlyvee","curlywedge","Sub","Sup","Cap","Cup","fork","epar","lessdot","gtdot",
             /* 8920 */ "Ll","Gg","leg","gel",
             /* 8926 */ "cuepr","cuesc","NotPrecedesSlantEqual","NotSucceedsSlantEqual",
             /* 8930 */ "NotSquareSubsetEqual","NotSquareSupersetEqual",
             /* 8934 */ "lnsim","gnsim","precnsim","scnsim","nltri","NotRightTriangle",
             /* 8940 */ "nltrie","NotRightTriangleEqual","vellip","ctdot","utdot","dtdot","disin","isinsv","isins","isindot",
             /* 8950 */ "notinvc","notinvb",
             /* 8953 */ "isinE","nisd","xnis","nis","notnivc","notnivb",
             /* 8965 */ "barwed","Barwed",
             /* 8968 */ "lceil","rceil",
             /* 8970 */ "LeftFloor","rfloor","drcrop","dlcrop","urcrop","ulcrop","bnot",
             /* 8978 */ "profline","profsurf",
             /* 8981 */ "telrec","target",
             /* 8988 */ "ulcorn","urcorn",
             /* 8990 */ "dlcorn","drcorn",
             /* 8994 */ "frown","smile",
             /* 9005 */ "cylcty","profalar",
             /* 9014 */ "topbot",
             /* 9021 */ "ovbar",
             /* 9023 */ "solbar",
             /* 9084 */ "angzarr",
             /* 9136 */ "lmoust","rmoust",
             /* 9140 */ "OverBracket","bbrk","bbrktbrk",
             /* 9180 */ "OverParenthesis","UnderParenthesis","OverBrace","UnderBrace",
             /* 9186 */ "trpezium",
             /* 9191 */ "elinters",
             /* 9251 */ "blank",
             /* 9416 */ "circledS",
             /* 9472 */ "boxh",
             /* 9474 */ "boxv",
             /* 9484 */ "boxdr",
             /* 9488 */ "boxdl",
             /* 9492 */ "boxur",
             /* 9496 */ "boxul",
             /* 9500 */ "boxvr",
             /* 9508 */ "boxvl",
             /* 9516 */ "boxhd",
             /* 9524 */ "boxhu",
             /* 9532 */ "boxvh",
             /* 9552 */ "boxH","boxV","boxdR","boxDr","boxDR","boxdL","boxDl","boxDL",
             /* 9560 */ "boxuR","boxUr","boxUR","boxuL","boxUl","boxUL","boxvR","boxVr","boxVR","boxvL",
             /* 9570 */ "boxVl","boxVL","boxHd","boxhD","boxHD","boxHu","boxhU","boxHU","boxvH","boxVh",
             /* 9580 */ "boxVH",
             /* 9600 */ "uhblk",
             /* 9604 */ "lhblk",
             /* 9608 */ "block",
             /* 9617 */ "blk14","blk12","blk34",
             /* 9633 */ "squ",
             /* 9642 */ "blacksquare","EmptyVerySmallSquare",
             /* 9645 */ "rect","marker",
             /* 9649 */ "fltns",
             /* 9651 */ "bigtriangleup","blacktriangle","triangle",
             /* 9656 */ "blacktriangleright","rtri",
             /* 9661 */ "bigtriangledown","blacktriangledown","dtri",
             /* 9666 */ "blacktriangleleft","ltri",
             /* 9674 */ "loz","cir",
             /* 9708 */ "tridot",
             /* 9711 */ "bigcirc",
             /* 9720 */ "ultri","urtri","lltri","EmptySmallSquare","FilledSmallSquare",
             /* 9733 */ "bigstar","star",
             /* 9742 */ "phone",
             /* 9792 */ "female",
             /* 9794 */ "male",
             /* 9824 */ "spades",
             /* 9827 */ "clubs",
             /* 9829 */ "hearts",
             /* 9830 */ "diamondsuit",
             /* 9834 */ "sung",
             /* 9837 */ "flat","natur","sharp",
             /* 10003 */ "check",
             /* 10007 */ "cross",
             /* 10016 */ "malt",
             /* 10038 */ "sext",
             /* 10072 */ "VerticalSeparator",
             /* 10098 */ "lbbrk","rbbrk",
             /* 10184 */ "bsolhsub","suphsol",
             /* 10214 */ "LeftDoubleBracket","RightDoubleBracket","lang","rang","Lang","Rang",
             /* 10220 */ "loang","roang",
             /* 10229 */ "LongLeftArrow",
             /* 10230 */ "LongRightArrow","LongLeftRightArrow","DoubleLongLeftArrow","DoubleLongRightArrow","DoubleLongLeftRightArrow",
             /* 10236 */ "longmapsto",
             /* 10239 */ "dzigrarr",
             /* 10498 */ "nvlArr","nvrArr",
             /* 10500 */ "nvHarr","Map",
             /* 10508 */ "lbarr","bkarow",
             /* 10510 */ "lBarr","dbkarow","drbkarow","DDotrahd","UpArrowBar","DownArrowBar",
             /* 10518 */ "Rarrtl",
             /* 10521 */ "latail","ratail","lAtail","rAtail","larrfs","rarrfs","larrbfs","rarrbfs",
             /* 10531 */ "nwarhk","nearhk","hksearow","hkswarow","nwnear","nesear","seswar","swnwar",
             /* 10547 */ "rarrc",
             /* 10549 */ "cudarrr",
             /* 10550 */ "ldca","rdca","cudarrl","larrpl",
             /* 10556 */ "curarrm","cularrp",
             /* 10565 */ "rarrpl",
             /* 10568 */ "harrcir","Uarrocir",
             /* 10570 */ "lurdshar","ldrushar",
             /* 10574 */ "LeftRightVector","RightUpDownVector","DownLeftRightVector","LeftUpDownVector","LeftVectorBar","RightVectorBar",
             /* 10580 */ "RightUpVectorBar","RightDownVectorBar","DownLeftVectorBar","DownRightVectorBar","LeftUpVectorBar","LeftDownVectorBar","LeftTeeVector","RightTeeVector","RightUpTeeVector","RightDownTeeVector",
             /* 10590 */ "DownLeftTeeVector","DownRightTeeVector","LeftUpTeeVector","LeftDownTeeVector","lHar","uHar","rHar","dHar","luruhar","ldrdhar",
             /* 10600 */ "ruluhar","rdldhar","lharul","llhard","rharul","lrhard","udhar","duhar","RoundImplies","erarr",
             /* 10610 */ "simrarr","larrsim","rarrsim","rarrap","ltlarr",
             /* 10616 */ "gtrarr","subrarr",
             /* 10619 */ "suplarr",
             /* 10620 */ "lfisht","rfisht","ufisht","dfisht",
             /* 10629 */ "lopar",
             /* 10630 */ "ropar",
             /* 10635 */ "lbrke","rbrke","lbrkslu","rbrksld","lbrksld",
             /* 10640 */ "rbrkslu","langd","rangd","lparlt","rpargt","gtlPar","ltrPar",
             /* 10650 */ "vzigzag",
             /* 10652 */ "vangrt","angrtvbd",
             /* 10660 */ "ange","range","dwangle","uwangle","angmsdaa","angmsdab","angmsdac","angmsdad","angmsdae","angmsdaf",
             /* 10670 */ "angmsdag","angmsdah","bemptyv","demptyv","cemptyv","raemptyv","laemptyv","ohbar","omid","opar",
             /* 10681 */ "operp",
             /* 10683 */ "olcross","odsold",
             /* 10686 */ "olcir","ofcir","olt","ogt",
             /* 10690 */ "cirscir","cirE","solb","bsolb",
             /* 10697 */ "boxbox",
             /* 10701 */ "trisb","rtriltri","LeftTriangleBar","RightTriangleBar",
             /* 10716 */ "iinfin","infintie","nvinfin",
             /* 10723 */ "eparsl","smeparsl","eqvparsl",
             /* 10731 */ "blacklozenge",
             /* 10740 */ "RuleDelayed",
             /* 10742 */ "dsol",
             /* 10752 */ "bigodot","bigoplus","bigotimes",
             /* 10756 */ "biguplus",
             /* 10758 */ "bigsqcup",
             /* 10764 */ "iiiint","fpartint",
             /* 10768 */ "cirfnint","awint",
             /* 10770 */ "rppolint","scpolint","npolint","pointint","quatint","intlarhk",
             /* 10786 */ "pluscir","plusacir","simplus","plusdu",
             /* 10790 */ "plussim","plustwo",
             /* 10793 */ "mcomma","minusdu",
             /* 10797 */ "loplus","roplus","Cross",
             /* 10800 */ "timesd","timesbar",
             /* 10803 */ "smashp","lotimes","rotimes","otimesas","Otimes","odiv","triplus",
             /* 10810 */ "triminus","tritime","intprod",
             /* 10815 */ "amalg","capdot",
             /* 10818 */ "ncup","ncap",
             /* 10820 */ "capand","cupor","cupcap","capcup","cupbrcap","capbrcup","cupcup","capcap","ccups","ccaps",
             /* 10832 */ "ccupssm",
             /* 10835 */ "And","Or","andand","oror","orslope",
             /* 10840 */ "andslope",
             /* 10842 */ "andv","orv","andd","ord",
             /* 10847 */ "wedbar",
             /* 10854 */ "sdote",
             /* 10858 */ "simdot",
             /* 10861 */ "congdot","easter","apacir","apE","eplus","pluse","Esim","Colone","Equal",
             /* 10871 */ "ddotseq","equivDD","ltcir","gtcir","ltquest","gtquest","leqslant","geqslant","lesdot",
             /* 10880 */ "gesdot","lesdoto","gesdoto","lesdotor","gesdotol","lap","gap","lne","gne","lnap",
             /* 10890 */ "gnap","lEg","gEl","lsime","gsime","lsimg","gsiml","lgE","glE","lesges",
             /* 10900 */ "gesles","els","egs","elsdot","egsdot","el","eg",
             /* 10909 */ "siml",
             /* 10910 */ "simg","simlE","simgE","LessLess","GreaterGreater",
             /* 10916 */ "glj","gla","ltcc","gtcc",
             /* 10920 */ "lescc","gescc","smt","lat","smte","late","bumpE","pre","sce",
             /* 10931 */ "prE","scE","precneqq","scnE","prap","scap","precnapprox","scnap","Pr",
             /* 10940 */ "Sc","subdot","supdot","subplus","supplus","submult","supmult","subedot","supedot","subE",
             /* 10950 */ "supE","subsim","supsim",
             /* 10955 */ "subnE","supnE",
             /* 10959 */ "csub",
             /* 10960 */ "csup","csube","csupe","subsup","supsub","subsub","supsup","suphsub","supdsub","forkv",
             /* 10970 */ "topfork","mlcp",
             /* 10980 */ "Dashv",
             /* 10982 */ "Vdashl","Barv","vBar","vBarv",
             /* 10987 */ "Vbar","Not","bNot",
             /* 10990 */ "rnmid","cirmid","midcir","topcir","nhpar","parsim",
             /* 11005 */ "parsl",
             /* 64256 */ "fflig","filig","fllig","ffilig",
             /* 64260 */ "ffllig",
             /* 119964 */ "Ascr",
             /* 119966 */ "Cscr","Dscr",
             /* 119970 */ "Gscr",
             /* 119973 */ "Jscr","Kscr",
             /* 119977 */ "Nscr","Oscr","Pscr",
             /* 119980 */ "Qscr",
             /* 119982 */ "Sscr","Tscr","Uscr","Vscr","Wscr","Xscr","Yscr","Zscr",
             /* 119990 */ "ascr","bscr","cscr","dscr",
             /* 119995 */ "fscr",
             /* 119997 */ "hscr","iscr","jscr",
             /* 120000 */ "kscr","lscr","mscr","nscr",
             /* 120005 */ "pscr","qscr","rscr","sscr","tscr",
             /* 120010 */ "uscr","vscr","wscr","xscr","yscr","zscr",
             /* 120068 */ "Afr","Bfr",
             /* 120071 */ "Dfr","Efr","Ffr","Gfr",
             /* 120077 */ "Jfr","Kfr","Lfr",
             /* 120080 */ "Mfr","Nfr","Ofr","Pfr","Qfr",
             /* 120086 */ "Sfr","Tfr","Ufr","Vfr",
             /* 120090 */ "Wfr","Xfr","Yfr",
             /* 120094 */ "afr","bfr","cfr","dfr","efr","ffr",
             /* 120100 */ "gfr","hfr","ifr","jfr","kfr","lfr","mfr","nfr","ofr","pfr",
             /* 120110 */ "qfr","rfr","sfr","tfr","ufr","vfr","wfr","xfr","yfr","zfr",
             /* 120120 */ "Aopf","Bopf",
             /* 120123 */ "Dopf","Eopf","Fopf","Gopf",
             /* 120128 */ "Iopf","Jopf",
             /* 120130 */ "Kopf","Lopf","Mopf",
             /* 120134 */ "Oopf",
             /* 120138 */ "Sopf","Topf",
             /* 120140 */ "Uopf","Vopf","Wopf","Xopf","Yopf",
             /* 120146 */ "aopf","bopf","copf","dopf",
             /* 120150 */ "eopf","fopf","gopf","hopf","iopf","jopf","kopf","lopf","mopf","nopf",
             /* 120160 */ "oopf","popf","qopf","ropf","sopf","topf","uopf","vopf","wopf","xopf",
             /* 120170 */ "yopf","zopf",
             /* 9676785 */ "DownBreve",
             /* 96768411 */ "tdot","DotDot"

        };

        private static void PopulateHtmlEntityMap()
        {
            if (codedEntities.Length != codedValues.Length)
            {
                throw new InvalidDataException("The codedValues array must be the same length as the codedEntities array.");
            }

            for (int i = 0; i < codedValues.Length; i++)
            {
                HtmlEntityMap.Add((char)codedValues[i], "&"+codedEntities[i]+";");
            }

        }
        /// <summary>
        /// Determines of a character must be encoded; if so, encodes it as the output parameter and
        /// returns true; if not, returns false.
        /// </summary>
        ///
        /// <param name="c">
        /// The text string to encode.
        /// </param>
        /// <param name="encoded">
        /// [out] The encoded string.
        /// </param>
        ///
        /// <returns>
        /// True if the character was encoded.
        /// </returns>

        protected override bool TryEncode(char c, out string encoded)
        {
            if (c>=160) {
                bool found = HtmlEntityMap.TryGetValue(c, out encoded);
                if (found) {
                    return true;
                }
            } 

            // fall through - default handling for anything we did not process
            
            return base.TryEncode(c, out encoded);
            
        }

        // The data for this method was generated using the following function from the HTML5 spec document.

        //[TestMethod, Test]
        //public void GetHtmlEntityMap()
        //{
        //    string html = Support.GetFile(TestDomPath("HTML Standard"));
        //    var dom = CQ.Create(html);
        //    var map = dom["#named-character-references-table .glyph"];

        //    string entityMap = "";
        //    string codeMap = "";
        //    IDictionary<int, string> dict = new Dictionary<int, string>();


        //    foreach (var item in map)
        //    {
        //        var itemCq = item.Cq();
        //        var entity = itemCq.Closest("tr").Find("code").Text();
        //        var numbercode = item.ChildNodes.First().Render(OutputFormatters.HtmlEncodingBasic);
        //        if (numbercode.StartsWith("&") && numbercode != "&lt;" && numbercode != "&gt;" && numbercode != "&amp;" && numbercode != "&quot;"
        //            && numbercode != "&nbsp;" && numbercode != "&gt;&#8402;" && numbercode != "&lt;&#8402;")
        //        {
        //            if (itemCq.HasClass("compound") || itemCq.HasClass("control"))
        //            {
        //                continue;
        //            }

        //            int num = int.Parse(numbercode.Replace("&#", "").Replace(";", ""));
        //            if (!dict.ContainsKey(num))
        //            {
        //                dict.Add(num, entity.Substring(0, entity.Length - 1));
        //            }
        //        }
        //    }

        //    List<int> keys = dict.Keys.ToList();
        //    keys.Sort();

        //    int lastKey = 0;

        //    foreach (var key in keys)
        //    {
        //        if (key != lastKey + 1 || key % 10 == 0)
        //        {
        //            entityMap += System.Environment.NewLine + "/* " + key.ToString() + " */ ";
        //            codeMap += System.Environment.NewLine;
        //        }

        //        entityMap += "\"" + dict[key] + "\",";
        //        codeMap += key.ToString() + ",";

        //        lastKey = key;

        //    }
        //    Debug.WriteLine(entityMap);
        //    Debug.WriteLine(codeMap);


        //}

    }
}
