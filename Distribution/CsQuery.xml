<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CsQuery</name>
    </assembly>
    <members>
        <member name="T:CsQuery.Objects">
            <summary>
            A set of utility functions for testing objects. 
            </summary>
        </member>
        <member name="M:CsQuery.Objects.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsJson(System.Object)">
            <summary>
            Returns true if the string appears to be JSON.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsImmutable(System.Object)">
            <summary>
            Only value types, strings, and null
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsExtendableType(System.Object)">
            <summary>
            Returns false if this is a value type, null string, or enumerable (but not Extendable)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsTruthy(System.Object)">
            <summary>
            Returns true when a value is "truthy" using similar logic as Javascript
              null = false
              empty string = false BUT zero string = true
              zero numeric = false
              false boolean values = false
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsNumericType(System.Type)">
            <summary>
            Returns true if the object is a primitive numeric type, e.g. exluding string &amp; char
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsNativeType(System.Type)">
            <summary>
            Returns true if the value is a JS native type (string, number, bool, datetime)
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsExpando(System.Object)">
            <summary>
            Test if an object is "Expando-like", e.g. a an IDictionary-string,object-
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.IsEmptyExpando(System.Object)">
            <summary>
            Test if an object is a an IDictionary-string,object- that is empty
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.IsKeyValuePair(System.Object)" -->
        <member name="M:CsQuery.Objects.Coerce(System.Object)">
            <summary>
            Coerce a javascript object into a Javascript type (null, bool, int, double, datetime, or string). If you know what the 
            type should be, then use Convert instead.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Convert``1(System.Object)">
            <summary>
            Convert an object of any value type to the specified type using any known means
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.Convert(System.Object,System.Type)">
            <summary>
            Convert an object of any value type to the specified type using any known means
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ChangeType(System.Object,System.Type)">
            <summary>
            Returns an Object with the specified Type and whose value is equivalent to the specified object.
            </summary>
            <param name="value">An Object that implements the IConvertible interface.</param>
            <param name="conversionType">The Type to which value is to be converted.</param>
            <returns>An object whose Type is conversionType (or conversionType's underlying type if conversionType
            is Nullable&lt;&gt;) and whose value is equivalent to value. -or- a null reference, if value is a null
            reference and conversionType is not a value type.</returns>
            <remarks>
            This method exists as a workaround to System.Convert.ChangeType(Object, Type) which does not handle
            nullables as of version 2.0 (2.0.50727.42) of the .NET Framework. The idea is that this method will
            be deleted once Convert.ChangeType is updated in a future version of the .NET Framework to handle
            nullable types, so we want this to behave as closely to Convert.ChangeType as possible.
            This method was written by Peter Johnson at:
            http://aspalliance.com/author.aspx?uId=1026.
            </remarks>
        </member>
        <member name="M:CsQuery.Objects.Enumerate``1(``0)">
            <summary>
            Returns an enumerable of one element from an object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:CsQuery.Objects.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Combine elements of a list into a single string, separated by separator
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ParseValue(System.Object)">
            <summary>
            Deal with datetime values
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ConvertDeserializedValue``1(System.Object,System.Boolean)">
            <summary>
            Takes a default deserialized value from JavaScriptSerializer and parses it into expando objectes
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="convertDates"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Objects.Dict2Dynamic``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean)" -->
        <member name="M:CsQuery.Objects.Extend(System.Boolean,System.Object,System.Object[])">
            <summary>
            Map properties of inputObjects to target. If target is an expando object, it will be updated. If not,
            a new one will be created including the properties of target and inputObjects.
            </summary>
            <param name="parents"></param>
            <param name="deep"></param>
            <param name="target"></param>
            <param name="inputObjects"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object)">
            <summary>
            Converts a regular object to an expando object, or returns the source object if it is already an expando object.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.ToExpando(System.Object,System.Boolean)">
            <summary>
            Converts a regular object to an expando object, or returns the source object if it is already an expando object.
            If "deep" is true, child properties are cloned rather than referenced.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.DeleteProperty(System.Object,System.String)">
            <summary>
            Remove a property from an object, returning a new expando object.
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="M:CsQuery.Objects.DeleteProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Remove a property from an object, returning a new expando object.
            </summary>
            <param name="obj"></param>
            <param name="property"></param>
        </member>
        <member name="M:CsQuery.Objects.AddExtendKVP(System.Boolean,System.Collections.Generic.HashSet{System.Object},System.Object,System.String,System.Object)">
            <summary>
            Implementation of "Extend" functionality
            </summary>
            <param name="deep"></param>
            <param name="parents"></param>
            <param name="target"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Objects.ToNewExpando``1(System.Object,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Implementation of object>expando
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="deep"></param>
            <param name="ignoreAttributes"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.TryStringToBool(System.String,System.Boolean@)">
            <summary>
            Try to parse an english or numeric string into a boolean value
            </summary>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Objects.NumberToDoubleOrInt(System.IConvertible)">
            <summary>
            Return an int or double from any number
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.SelectionSet`1">
            <summary>
            A list of DOM elements. The default order is the order added to this construct; the Order property can be changed to
            return the contents in a different order.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CsQuery.Utility.SelectionSet`1.Touch">
            <summary>
            Force the list to be re-sorted.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.SelectionSet`1.SynchronizeOrderedListAfterRemove">
            <summary>
            Use after set operations that alter the list
            </summary>
        </member>
        <member name="P:CsQuery.Utility.SelectionSet`1.Order">
            <summary>
            The order in which elements in the set are returned
            </summary>
        </member>
        <member name="T:CsQuery.Web.AsyncPostbackData">
            <summary>
            Represents async data from an ASP.NET webforms UpdatePanel
            </summary>
        </member>
        <member name="P:CsQuery.Web.AsyncPostbackData.UserOutput">
            <summary>
            Write JSON data to a global variable
            </summary>
            <param name="target"></param>
            <param name="data"></param>
        </member>
        <member name="T:CsQuery.IDomElement">
            <summary>
            A regular DOM element
            </summary>
        </member>
        <member name="T:CsQuery.IDomContainer">
            <summary>
            Interface for objects that can contain other objects. Note that to allow some consistency with how DOM
            objects are used in the browser DOM, many methods are part of the base IDomObject interface so that they
            can be used (and return null/missing data) on elements to which they don't apply. So in actuality the only 
            unique methods are nonstandard ones.
            </summary>
        </member>
        <member name="P:CsQuery.IDomNode.NodeName">
            <summary>
            The node (tag) name, in upper case 
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.TagName">
            <summary>
            The same as NodeName, but not mapped to uppercase (e.g. exactly as parsed)
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasAttributes">
            <summary>
            Returns true if this node has any attributes
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasClasses">
            <summary>
            Returns true if this node has CSS classes
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.HasStyles">
            <summary>
            Returns true if this node has styles
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Type">
            <summary>
            The type of attribute
            </summary>
        </member>
        <member name="P:CsQuery.IDomObject.Name">
            <summary>
            For input elements, the name
            </summary>
        </member>
        <member name="T:CsQuery.IDomIndexedNode">
            <summary>
            A node that should be indexed
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Forms.ExtensionMethods">
            <summary>
            Extension methods for use in form manipulation
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue(CsQuery.CQ,System.String)">
            <summary>
            Get the value for a particular form element identified by "#ID" or "name". This method will create a selector
            that identifies any input, select, button or textarea element by name attribute (if not passed an ID selector)
            </summary>
            <typeparam name="T">The datatype that should be returned</typeparam>
            <param name="obj">The CsQuery object to which this applies</param>
            <param name="name">The name of the input element</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormValue``1(CsQuery.CQ,System.String)">
            <summary>
            Get the value for a particular form element identified by "#ID" or "name"
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.FormElement(CsQuery.CQ,System.String)">
            <summary>
            Return an element identified by "#id" or "name". (Special case selector to simplify accessing form elements).
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ)">
            <summary>
            (BETA) Update form values from the HTTP post data in the current HttpContext
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Collections.Specialized.NameValueCollection)">
            <summary>
            (BETA) Update form values from the data in collection provided
            </summary>
            <param name="obj"></param>
            <returns>A CQ object with all form elements searched</returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestorePost(CsQuery.CQ,System.Web.HttpContext)">
            <summary>
            (BETA) Update form values from the data in httpContext.Request.Form
            </summary>
            <param name="obj"></param>
            <returns>A CQ object with all form elements searched</returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.RestoreData(CsQuery.IDomElement,CsQuery.CQ,System.String)">
            <summary>
            Restore "value" to a single element
            </summary>
            <param name="e"></param>
            <param name="csQueryContext"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDown(CsQuery.CQ,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Build a dropdown list for each element in the selection set using name/value pairs from data.
            Note tha the "key" becomes the "value" on the element, and the "value" becomes the text assocaited
            with it.
            </summary>
            <param name="selection"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.CreateDropDownFromEnum``1(CsQuery.CQ,System.String,System.Boolean)" -->
        <member name="M:CsQuery.ExtensionMethods.Forms.ExtensionMethods.ToggleDisabled(CsQuery.CQ,System.Boolean)">
            <summary>
            Adds or removes the "enabled" property based on the parameter value
            </summary>
            <param name="selection"></param>
            <param name="addRemoveSwitch"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.StringScanner.IValueInfo.AlphaISO10646">
            <summary>
            Indicates that a character is alphabetic-like character defined as a-z, A-Z, hyphen, underscore, and ISO 10646 code U+00A1 and higher.
            (per characters allowed in CSS identifiers)
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Type">
            <summary>
            Flags indicating the use of this character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.NumericExtended">
            <summary>
            Returns true if numeric, dot or -
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.CharacterInfo.Bound">
            <summary>
            Enclosing, plus double and single quotes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.StringScanner.Implementation.CharacterInfo.Enclosing" -->
        <member name="T:CsQuery.Utility.Support">
            <summary>
            Some static methods that didn't fit in anywhere else. 
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFile(System.String)">
            <summary>
            If unset, will be set when GetFile is called to the guessed path
            </summary>
        </member>
        <member name="M:CsQuery.Utility.Support.GetFilePath(System.String)">
            <summary>
            Try to find the path to a file based on the execution location of the calling assembly
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String)">
            <summary>
             Gets a resource from the calling assembly
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.GetResourceStream(System.String,System.Reflection.Assembly)">
            <summary>
            Gets a resource name using the assembly and resource name
            </summary>
            <param name="resourceName"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.CleanFilePath(System.String)">
            <summary>
            Make sure there's one (or zero, if not rooted) leading or trailing slash, 
            and convert slashes to backslashes. Missing values are returned as just one backslash.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.Support.FindPathTo(System.String,System.String)">
            <summary>
            Given a relative path, locates a file in the parent heirarchy by matching parts of the path
            </summary>
            <param name="text"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.ExtensionMethods.Internal.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsOneOf(System.Enum,System.Enum[])">
            <summary>
            Returns true if the enum is any of the parameters in question
            </summary>
            <param name="theEnum"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValue(System.Enum)">
            <summary>
            Return the integer value for an enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.GetValueAsString(System.Enum)">
            <summary>
            Return the integer value cast as a string for an enum
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Return true of a given collection is null or has no values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListAdd(System.String,System.String,System.String)">
            <summary>
            Given a string that repesents a list demarcated by separator, add a new value to it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ListRemove(System.String,System.String,System.String)">
            <summary>
            Given a string that is a list demarcated by separator, remove a value from it
            </summary>
            <param name="list"></param>
            <param name="value"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String)">
            <summary>
            Return the position of the first occurrence of a string in a character array 
            </summary>
            <param name="text"></param>
            <param name="seek"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Seek(System.Char[],System.String,System.Int32)">
            <summary>
            Return the position of the first occurrence of a string in a character array that is on or after startIndex
            </summary>
            <param name="text"></param>
            <param name="seek"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.RemoveWhitespace(System.String)">
            <summary>
            Remove all whitespace from a string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.BeforeLast(System.String,System.String)">
            <summary>
            Returns the part of the string before the last occurence of text
            </summary>
            <param name="?"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.FindPathTo(System.String,System.String)">
            <summary>
            Given a relative path, locates a file in the parent heirarchy by matching parts of the path
            </summary>
            <param name="text"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.After(System.String,System.String)">
            <summary>
            Returns the string after the end of the first occurrence of "find"
            </summary>
            <param name="text"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.AfterLast(System.String,System.String)">
            <summary>
            Return the part of the string that is after the last occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.Before(System.String,System.String)">
            <summary>
            Return the part of a string that is before the first occurrence of the operand
            </summary>
            <param name="text">The source string</param>
            <param name="find">The text to find</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Test if a sequence is null or empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.TryGetFirst``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            Try to get the first element of a sequence. If the sequence is null or has no elements, return false.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="baseList"></param>
            <param name="firstElement"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SingleOrDefaultAlways``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return a single element or the default value; does not fail on >1 value but also returns the default.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over a sequence, calling the delegate for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.CleanUp(System.String)">
            <summary>
            Clean a string by converts null to an empty string and trimming any whitespace from the beginning and end
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String)">
            <summary>
            Perform a string split using whitespace demarcators (' ', tab, newline, return) and trimming each result
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char)">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.SplitClean(System.String,System.Char[])">
            <summary>
            Perform a string split that also trims whitespace from each result and removes duplicats
            </summary>
            <param name="text"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IfNullOrEmpty(System.String,System.String)">
            <summary>
            Test a string for null or empty; if true, returns an alternate value
            </summary>
            <param name="value"></param>
            <param name="alternate"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.Internal.ExtensionMethods.IfNull(System.String,System.String)">
            <summary>
            Test a string for null; if true, returns an alternate value
            </summary>
            <param name="value"></param>
            <param name="alternate"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Engine.MatchElement">
            <summary>
             Wrapper class used by the engine to store info on the selector stack.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomDocument">
            <summary>
            Special node type to represent the DOM.
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomContainer`1">
            <summary>
            Base class for Dom object that contain other elements
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomObject`1">
            <summary>
            Base class for anything that exists in the DOM
            </summary>
            
        </member>
        <member name="T:CsQuery.Implementation.DomObject">
            <summary>
            Something that appears in the DOM (e.g., not an attribute, DomDocument, and so on)
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Cq">
            <summary>
            Wraps the element in a CsQuery object
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomObject.Remove">
            <summary>
            Remove this element from the DOM
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.IsDisconnected">
            <summary>
            The element is not associated with an IDomDocument
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.PathID">
            <summary>
            Unique ID assigned when added to a dom. This is not the full path but just the ID at this level. The full
            path is never stored with each node to prevent having to regenerate if node trees are moved. 
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Document">
            <summary>
            The DOM for this object. This is obtained by looking at its parents value until it finds a non-null
            Document in a parent. The value is cached locally as long as the current value of Parent remains the same.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Item(System.String)">
            <summary>
            Returns the value of the named attribute
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Index">
            <summary>
            The element's absolute index among its siblings
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomObject.Path">
            <summary>
            The full path to this node. This is calculated by requesting the parent path and adding its own ID.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomObject`1.CloneImplementation">
            <summary>
            This is called by the base class DomObject, and ensures that the typed Clone implementations get called when
            the object is accessed through the IDomObject interface.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildNodes">
            <summary>
            Returns all children (including inner HTML as objects);
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomContainer`1.ChildElements">
            <summary>
            Returns all elements
            </summary>
        </member>
        <member name="T:CsQuery.IDomDocument">
            <summary>
            
            </summary>
        </member>
        <member name="P:CsQuery.IDomDocument.Data">
            <summary>
            Any user data to be persisted with this DOM
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomDocument.DocType">
            <summary>
            Gets the DocType for this node. This can be changed through the DomDocument
            </summary>
        </member>
        <member name="F:CsQuery.Implementation.CSSStyleDeclaration._Styles">
            <summary>
            Warning: Do not attempt to access _Styles directly from this class or any subclass to determine whether or 
            not there are styles, since it also depends on QuickSetStyles. Use HasStyles method instead.
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clone(CsQuery.IDomElement)">
            <summary>
            Create a clone of this CSSStyleDeclaration object bound to the owner passed
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetStyles(System.String,System.Boolean)">
            <summary>
            Sets all the styles from a single CSS style string. Any existing styles will be erased.
            This method is used by DomElementFactory (not in strict mode).
            </summary>
            <param name="styles">A legal HTML style string</param>
            <param name="strict">When true, the styles will be validated and an error thrown if any are not valid</param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.AddStyles(System.String,System.Boolean)">
            <summary>
            Add one or more styles to this element. Unlike SetStyle, existing styles are not affected, except
            for existing styles of the same name.
            </summary>
            <param name="styles"></param>
            <param name="strict"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Remove(System.String)">
            <summary>
            Remove a single named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Add(System.String,System.String)">
            <summary>
            Add a single style
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.Clear">
            <summary>
            Remove all styles
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.HasStyle(System.String)">
            <summary>
            Returns true if the named style is defined
            </summary>
            <param name="styleName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.SetRaw(System.String,System.String)">
            <summary>
            Sets style setting with no parsing
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.UpdateIndex(System.Boolean)">
            <summary>
            Adds, removes, or does nothing to the index depending on whether a change is needed
            </summary>
            <param name="previouslyHadStyles"></param>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ValidateUnitString(System.String,System.String)">
            <summary>
            Cleans/validates a CSS units string, or throws an error if not possible
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.CSSStyleDeclaration.ParseCamelCase(System.String)">
            <summary>
            Convert camelcased CSS attributes to correct value
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.QuickSetValue">
            <summary>
            For fast DOM creation - since styles are not indexed or validated.
            If they are ever accessed by style name, they will be parsed on demand.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.HasStyles">
            <summary>
            True if there is at least one style.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String)">
            <summary>
            Get or set the named style
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.CSSStyleDeclaration.Item(System.String,System.Boolean)">
            <summary>
            Get or set the named style, optionally enabling strict mode
            </summary>
            <param name="name"></param>
            <param name="strict"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CsQuery.CQ" -->
        <member name="M:CsQuery.CQ.Clear">
            <summary>
            Clear the entire object
            </summary>
        </member>
        <member name="M:CsQuery.CQ.ClearSelections">
            <summary>
            Clears the current selection set
            </summary>
        </member>
        <member name="M:CsQuery.CQ.MapMultipleValues(System.Object)">
            <summary>
            Map a CSV or enumerable object to a hashset
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.SetOptionSelected(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},System.Object,System.Boolean)">
            <summary>
            Helper function for option groups to set multiple options when passed a CSV of values.
            </summary>
            <param name="elements"></param>
            <param name="value"></param>
            
        </member>
        <member name="M:CsQuery.CQ.GetElementIndex(CsQuery.IDomObject)">
            <summary>
            Return the relative position of an element among its Element siblings (non-element nodes excluded)
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AddSelection(CsQuery.IDomObject)">
            <summary>
            Add an item to the list of selected elements. It should be part of this DOM.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.CQ.AddSelectionRange(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Adds each element to the current selection set. Returns true if any elements were added.
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.CQ.SetProp(System.String,System.Object)" -->
        <member name="M:CsQuery.CQ.mergeSelections(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs a set of selectors and returns the combined result as a single enumerable
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.mergeContent(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs a set of HTML creation selectors and returns result as a single enumerable
            </summary>
            <param name="selectors"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionChildren">
            <summary>
            Return all children of all selected elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionSiblings">
            <summary>
            Return all children of all selected elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.getInnermostContainer(System.Collections.Generic.IEnumerable{CsQuery.IDomElement},CsQuery.IDomElement@,CsQuery.IDomElement@)">
            <summary>
            Ouptuts the deepest-nested object, it's root element from the list of elements passed,
            and returns the depth, given a structure
            </summary>
            <param name="elements"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Int32)">
            <summary>
            Insert every element in the selection at or after the index of each target (adding offset to the index).
            If there is more than one target, the a clone is made of the selection for the 2nd and later targets.
            </summary>
            <param name="target"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.getTrueTarget(CsQuery.IDomElement)">
            <summary>
            Deals with tbody as the target of appends
            </summary>
            <param name="apparentTarget"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.#ctor">
            <summary>
            Creates a new, empty jQuery object.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object using an existing instance and a selector. if the selector is null or missing, then
            it will contain no selection results.
            </summary>
            <param name="selector">A valid CSS selector</param>
            <param name="context">The context</param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,CsQuery.IDomElement)">
            <summary>
            Create a new CsQuery object using an existing instance and a selector. if the selector is null or missing, then
            it will contain no selection results.
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.String,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from HTML, and assign CSS from a JSON string, within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.String,System.Object,CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from HTML, and assign CSS, within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.CQ.#ctor(CsQuery.IDomObject)" -->
        <member name="M:CsQuery.CQ.#ctor(CsQuery.IDomObject,CsQuery.CQ)">
            <summary>
            Create a new CsQuery from a single DOM element
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Create a new CsQuery object from an existing CsQuery object (or any set of DOM elements).
            If the source is a unassociated list of DOM elements, the context of the first element will become
            the context of the new CsQuery object.
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.CQ.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.CQ)">
            <summary>
            Create a new CsQuery object from a set of DOM elements, using the DOM of the first element.
            could contain more than one context)
            </summary>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.CQ.Load(System.String)">
            <summary>
            Creates a new DOM. This will DESTROY any existing DOM. This is not the same as Select.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.op_Implicit(System.String)~CsQuery.CQ">
            <summary>
            Create a new CQ object from html
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.op_Implicit(CsQuery.Implementation.DomObject)~CsQuery.CQ">
            <summary>
            Create a new CQ object from an element
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Load(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Creates a new DOM. This will DESTROY any existing DOM. This is not the same as Select.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateNewDom(System.Char[])">
            <summary>
            Replace the existing DOM with the html (or empty if no parameter passed)
            </summary>
            <param name="html"></param>
        </member>
        <member name="F:CsQuery.CQ.DefaultDomRenderingOptions">
            <summary>
            Rendering option flags
            </summary>
        </member>
        <member name="F:CsQuery.CQ.DefaultServerConfig">
            <summary>
            The default settings used when making remote requests
            </summary>
        </member>
        <member name="F:CsQuery.CQ.DefaultDocType">
            <summary>
            The default rendering type. This mostly controls the header and how tags are closed. UNIMPLEMENTED right now.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String)">
            <summary>
            Creeate a new DOM from HTML text
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Char[])">
            <summary>
            Create a new DOM object from a character array
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,System.Object)">
            <summary>
            Create a new DOM object from html, and use quickSet to create attributes (and/or css)
            </summary>
            <param name="html">A string of HTML</param>
            <param name="quickSet"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.String,CsQuery.CQ)">
            <summary>
            Create a new CQ object from an existing context, bound to the same domain.
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
        </member>
        <member name="M:CsQuery.CQ.Create(CsQuery.IDomObject)">
            <summary>
            Create a new DOM from a single element
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Create(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Creeate a new DOM from a squence of elements, or another CQ object
            </summary>
            <param name="elements">A sequence of elements</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromFile(System.String)">
            <summary>
            Creates a new DOM from an HTML file.
            </summary>
            <param name="htmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrl(System.String,CsQuery.Web.ServerConfig)">
            <summary>
            Creates a new DOM from an HTML file.
            </summary>
            <param name="htmlFile"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server, returning a promise that will resolve when the request is completed or rejected
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CreateFromUrlAsync(System.String,System.Int32,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an asynchronous request to an HTTP server
            </summary>
            <param name="url"></param>
            <param name="callbackSuccess"></param>
            <param name="callbackFail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.WaitForAsyncEvents(System.Int32)">
            <summary>
            Block this thread until all pending asynchronous web requests have completed.
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:CsQuery.CQ.WhenAll(CsQuery.Promises.IPromise[])">
            <summary>
            Return a new promise that resolves when all the promises passed in are resolved
            </summary>
            <param name="promises"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterate over each element in a sequence, and call a delegate for each element
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="func"></param>
        </member>
        <member name="M:CsQuery.CQ.Map``1(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},System.Func{CsQuery.IDomObject,``0})">
            <summary>
            Map each element of the result set to a new form. If a value is returned from the function, the element
            will be excluded.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="elements"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Object,System.Object[])">
            <summary>
            Map each property of the objects in sources to the target object.  Returns an expando object (either 
            the target object, if it's an expando object, or a new expando object)
            </summary>
            <param name="target"></param>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Extend(System.Boolean,System.Object,System.Object[])">
            <summary>
            Map each property of the objects in sources to the target object.  Returns an expando object (either 
            the target object, if it's an expando object, or a new expando object)
            </summary>
            <param name="target"></param>
            <param name="sources"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToJSON(System.Object)">
            <summary>
            Convert an object to JSON
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON``1(System.String)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String)">
            <summary>
            Parse a JSON string into an expando object, or a json value into a primitive type.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ParseJSON(System.String,System.Type)">
            <summary>
            Parse a JSON string into an expando object, or a json value into a primitive type.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToExpando(System.Object)">
            <summary>
            Convert a dictionary to an expando object. Use to get another expando object from a sub-object of an expando object,
            e.g. as returned from JSON data
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.EnumerateProperties``1(System.Object)">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.EnumerateProperties``1(System.Object,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Enumerate the values of the properties of an object to a sequence of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="ignoreAttributes">All properties with an attribute of these types will be ignored</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.SelectionHtml">
            <summary>
            Returns the HTML for all selected documents, separated by commas. No inner html or children are included.
            </summary>
            
        </member>
        <member name="M:CsQuery.CQ.RenderSelection">
            <summary>
            Renders just the selection set completely.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Render">
            <summary>
            Renders the DOM to a string
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Render(CsQuery.DomRenderingOptions)">
            <summary>
            Render the complete DOM with specific options
            </summary>
            <param name="renderingOptions"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.New">
            <summary>
            Returns a new empty CsQuery object bound to this domain
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.New(CsQuery.Utility.SelectionSetOrder)">
            <summary>
            Returns a new empty CsQuery object bound to this domain, whose results are returned in the specified order
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.EnsureCsQuery(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return a CsQuery object wrapping the enumerable passed, or the object itself if 
            already a CsQuery obect. Unlike CsQuery(context), this will not create a new CsQuery object from 
            an existing one.
            </summary>
            <param name="elements"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.FirstElement">
            <summary>
            The first IDomElement (e.g. not text/special nodes) in the selection set, or null if none
            </summary>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Boolean,System.String,System.String)">
            <summary>
            Removes one of two selectors/objects based on the value of the first parameter. The remaining one is
            explicitly shown. True keeps the first, false keeps the 2nd.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.KeepOne(System.Int32,System.String[])">
            <summary>
            Removes all but one of a list selectors/objects based on the value of the first parameter. The remaining one is
            explicitly shown. The value of which is zero-based.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.IncludeWhen(System.Boolean)">
            <summary>
            Conditionally includes a selection. This is the equivalent of calling Remove() only when "include" is false
            (extension of jQuery API)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.SetSelected(System.String,System.IConvertible)">
            <summary>
            Set a specific item of a named option group selected
            </summary>
            <param name="groupName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn">
            <summary>
            Given a table header or cell, returns all members of the columm.
            </summary>
            <param name="columnMember"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.GetTableColumn(System.Int32)">
            <summary>
            Selects then zero-based nth th and td cells from all rows in any matched tables.
            DOES NOT ACCOUNT FOR COLSPAN. If you have inconsistent numbers of columns, you will get inconsistent results.
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot">
            <summary>
            The current selection set will become the DOM. This is destructive.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.MakeRoot(System.String)">
            <summary>
            Conver the results of the selection into the DOM. This is destructive.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AndSelf">
            <summary>
            Add the previous set of elements on the stack to the current set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.End">
            <summary>
            End the most recent filtering operation in the current chain and return the set of matched elements 
            to its previous state
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Get">
            <summary>
            Return the active selection set
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Get(System.Int32)">
            <summary>
            Return a specific element from the selection set
            </summary>
            <param name="index">The zero-based index of the element to be returned</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Empty">
            <summary>
            Remove all child nodes of the set of matched elements from the DOM.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Html(System.String[])">
            <summary>
            Set the HTML contents of each element in the set of matched elements. 
            Any elements without InnerHtml are ignored.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Html">
            <summary>
            Get the HTML contents of the first element in the set of matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Has(System.String)">
            <summary>
            Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Text(System.String)">
            <summary>
            Set the content of each element in the set of matched elements to the specified text.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Text">
            <summary>
            Get the combined text contents of each element in the set of matched elements, including their descendants.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Text(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Helper for public Text() function to act recursively
            </summary>
            <param name="sb"></param>
            <param name="elements"></param>
        </member>
        <member name="M:CsQuery.CQ.Add(System.String)">
            <summary>
            Add elements to the set of matched elements from a selector or an HTML fragment. Returns a new jQuery object.
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AddClass(System.String)">
            <summary>
            Adds the specified class(es) to each of the set of matched elements.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String)">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, 
            depending on either the class's presence.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ToggleClass(System.String,System.Boolean)">
            <summary>
            Add or remove one or more classes from each element in the set of matched elements, 
            depending on the value of the switch argument.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.HasClass(System.String)">
            <summary>
            Determine whether any of the matched elements are assigned the given class.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Append(System.String[])">
            <summary>
            Insert content, specified by the parameter, to the end of each element in the set of matched elements.
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AppendTo(System.String)">
            <summary>
             Insert every element in the set of matched elements to the end of the target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Append(System.Func{System.Int32,System.String,System.String})">
             <summary>
            
             </summary>
             <param name="func">
             delegate(int index, string html) 
              A function that returns an HTML string to insert at the end of each element in the set of matched elements. 
             Receives the index position of the element in the set and the old HTML value of the element as arguments.
             </param>
             <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Prepend(CsQuery.IDomObject[])">
            <summary>
            Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String)">
            <summary>
            Get the value of an attribute for the first element in the set of matched elements.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Attr``1(System.String)">
            <summary>
            Returns an attribute value as a nullable integer, or null if not an integer
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Attr(System.String,System.IConvertible)">
            <summary>
            Set one or more attributes for the set of matched elements.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object)">
            <summary>
            Map an object to attributes.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AttrSet(System.Object,System.Boolean)">
            <summary>
            Map an object to attributes. If quickSet is true, treat give special treamtent to "css", "html", "text", "width" and "height" properties.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.AttrReplace(System.String,System.String,System.String)">
            <summary>
            Perform a substring replace on the contents of the named attribute in each item in the selection set. 
            </summary>
            <param name="name"></param>
            <param name="replaceWhat"></param>
            <param name="replaceWith"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveAttr(System.String)">
            <summary>
            Remove an attribute from each element in the set of matched elements.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveProp(System.String)">
            <summary>
             Remove a property for the set of matched elements.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Before(System.String)">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
            <param name="?"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Before(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Insert content, specified by the parameter, before each element in the set of matched elements.
            </summary>
        </member>
        <member name="M:CsQuery.CQ.After(System.String)">
            <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.After(CsQuery.IDomObject)">
            <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.After(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
             Insert content, specified by the parameter, after each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Unwrap">
            <summary>
            Remove the parents of the set of matched elements from the DOM, 
            leaving the matched elements in their place.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(System.String)">
            <summary>
            Wrap an HTML structure around the content of each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.WrapInner(CsQuery.IDomObject)">
            <summary>
            Wrap an HTML structure around the content of each element in the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.CQ.WrapInner(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})" -->
        <member name="M:CsQuery.CQ.Children(System.String)">
            <summary>
            Get the children of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Siblings(System.String)">
            <summary>
            Description: Get the siblings of each element in the set of matched elements, optionally filtered by a selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Clone">
            <summary>
            Create a deep copy of the set of matched elements.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Closest(System.String)">
            <summary>
            Get the first ancestor element that matches the selector, beginning at the current element and progressing up through the DOM tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Contents">
            <summary>
            Get the children of each element in the set of matched elements, including text and comment nodes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.CssSet(System.Object)">
            <summary>
             Set one or more CSS properties for the set of matched elements from JSON data
            </summary>
            <param name="cssJson"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String,System.IConvertible)">
            <summary>
             Set one or more CSS properties for the set of matched elements.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Css``1(System.String)">
            <summary>
            Get the value of a style property for the first element in the set of matched elements,
            and converts to type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Css(System.String)">
            <summary>
            Get the value of a style property for the first element in the set of matched elements
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Data">
            <summary>
            Returns all values at named data store for the first element in the jQuery collection, as set by data(name, value).
            (Any attributes starting with data-)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.String)">
            <summary>
            Store arbitrary data associated with the specified element. Returns the value that was set.
            </summary>
            <param name="key"></param>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String,System.Object)">
            <summary>
            Convert an object to JSON and store as data
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.DataSet(System.Object)">
            <summary>
            Convert an object to JSON and stores each named property as a data element
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Data(System.String)">
            <summary>
            Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).
            </summary>
        </member>
        <member name="M:CsQuery.CQ.DataRaw(System.String)">
            <summary>
            Returns data as a string, with no attempt to decode it
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{System.Int32,CsQuery.IDomObject})">
            <summary>
            Iterate over each matched element.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Each(System.Action{CsQuery.IDomObject})">
            <summary>
            Iterate over each matched element.
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Eq(System.Int32)">
            <summary>
            Reduce the set of matched elements to the one at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Find(System.String)">
            <summary>
            Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String)">
            <summary>
            Select elements and return a new CSQuery object 
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Select(CsQuery.IDomObject)">
            <summary>
            Return element wrapped in a new CQ
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Select(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return a sequence of elements wrapped in a new CQ
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,CsQuery.IDomObject)">
            <summary>
            Select elements from within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Select(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
             Select elements from within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.First">
            <summary>
            Reduce the set of matched elements to the first in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Last">
            <summary>
            Reduce the set of matched elements to the last in the set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Hide">
            <summary>
            Hide the matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Toggle">
            <summary>
            Toggle the visiblity state of the matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Toggle(System.Boolean)">
            <summary>
            Display or hide the matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Index">
            <summary>
            Search for a given element from among the matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Index(System.String)">
            <summary>
            Returns the position of the current selection within the new selection defined by "selector"
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(CsQuery.IDomObject)">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAfter(System.String)">
            <summary>
            Insert every element in the set of matched elements after the target.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertAtOffset(CsQuery.IDomObject,System.Int32)">
            <summary>
            Support for InsertAfter and InsertBefore. An offset of 0 will insert before the current element. 1 after.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.InsertBefore(System.String)">
            <summary>
            A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Prev(System.String)">
            <summary>
            Get the immediately preceding sibling of each element in the set of matched elements, 
            optionally filtered by a selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Next(System.String)">
            <summary>
            Get the immediately following sibling of each element in the set of matched elements. 
            If a selector is provided, it retrieves the next sibling only if it matches that selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.NextAll(System.String)">
            <summary>
            Get all following siblings of each element in the set of matched elements, 
            optionally filtered by a selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.NextUntil(System.String,System.String)">
            <summary>
            Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed
            </summary>
            <param name="selector"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.PrevAll(System.String)">
            <summary>
            Get all following siblings of each element in the set of matched elements, 
            optionally filtered by a selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.PrevUntil(System.String,System.String)">
            <summary>
            Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed
            </summary>
            <param name="selector"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32)">
            <summary>
            Reduce the set of matched elements to a subset beginning with the index provided
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Slice(System.Int32,System.Int32)">
            <summary>
            Reduce the set of matched elements to a subset specified by a range of indices.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Parent(System.String)">
            <summary>
            Get the parent of each element in the current set of matched elements, optionally filtered by a selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Parents(System.String)">
            <summary>
             Get the ancestors of each element in the current set of matched elements, 
             optionally filtered by a selector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Prop(System.String,System.IConvertible)">
            <summary>
            Set one or more properties for the set of matched elements.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.CQ.Remove(System.String)">
            <summary>
            Remove all selected elements from the DOM
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Detach(System.String)">
            <summary>
            This is synonymous with Remove in CsQuery, since there's nothing associated with an element
            that is not rendered.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveClass(System.String)">
            <summary>
            Remove a single class, multiple classes, or all classes from each element in the set of matched elements.
            </summary>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.RemoveData(System.String)">
            <summary>
            Remove a previously-stored piece of data.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.HasData">
            <summary>
            Determine whether an element has any jQuery data associated with it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceWith(System.String[])">
            <summary>
            Replace each element in the set of matched elements with the provided new content.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.String)">
            <summary>
            Replace the target element with the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(CsQuery.IDomObject)">
            <summary>
            Replace the target element with the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.ReplaceAll(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Replace each target element with the set of matched elements.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Val``1">
            <summary>
            Get the current value of the first element in the set of matched elements, and try to convert to the specified type
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Val">
            <summary>
            Get the current value of the first element in the set of matched elements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Val(System.Object)">
            <summary>
            Set the value of each element in the set of matched elements. If a comma-separated value is passed to a multuple select list, then it
            will be treated as an array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Width(System.Int32)">
            <summary>
            Set the CSS width of each element in the set of matched elements.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Height(System.Int32)">
            <summary>
            Set the CSS width of each element in the set of matched elements.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.CQ.Is(System.String)">
            <summary>
            Check the current matched set of elements against a selector and return true if at least one of these elements matches the selector.
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.CsQueryParent">
            <summary>
            The object from which this CsQuery was created
            </summary>
        </member>
        <member name="P:CsQuery.CQ.SelectionSet">
            <summary>
            The current selection set including all node types. 
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Browser">
            <summary>
            Provide simple user agent information
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Document">
            <summary>
            Represents the full, parsed DOM for an object created with an HTML parameter
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Selectors">
            <summary>
             The selector (parsed) used to create this instance
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Selection">
            <summary>
            The entire selection set as an enumerable, same as enumerting on the object itself (though this may
            allow you to more easily use extension methods)
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Elements">
            <summary>
            Returns just IDomElements from the selection list.
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Length">
            <summary>
            The number of elements in the CsQuery object
            </summary>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Int32)">
            <summary>
            Return matched element. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String)">
            <summary>
            Select elements and return a new CSQuery object 
            </summary>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.Item(CsQuery.IDomObject)">
            <summary>
            Return element wrapped in a new CQ
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.Item(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return a sequence of elements wrapped in a new CQ
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,CsQuery.IDomObject)">
            <summary>
            Select elements from within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.CQ.Item(System.String,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
             Select elements from within a context
            </summary>
            <param name="selector"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.StringScanner.IExpectPattern">
            <summary>
            An interface for pattern matching. For each character, Expect will be called until it returns false.
            Validate will be called with the resulting string, and should return true or false to valide the entire pattern.
            Initialize allows setting up/capturing global data about the string in case other info is eneded
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.IExpectPattern.Validate">
            <summary>
            Should return the next position (typically int++) or -1 if matching is complete
            </summary>
            <param name="index"></param>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.Validate">
            <summary>
            By default, returns true if the string is not empty
            </summary>
            <param name="result"></param>
            <param name="parsedResult"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.ExpectPattern.GetOuput(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Copy the source to an output string betweem startIndex and endIndex, optionally unescaping part of it
            </summary>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="quotedStartIndex"></param>
            <param name="quotedEndIndex"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.JsObject">
            <summary>
            A dynamic object implementation that differs from ExpandoObject in two ways:
            
            1) Missing property values always return null (or a specified value)
            2) Allows case-insensitivity
            
            </summary>
        </member>
        <member name="M:CsQuery.JsObject.GetList``1(System.String)">
            <summary>
            Try to return a li
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Utility.SimpleDictionary`1">
            <summary>
            Just convers a NameValueCollection to a disctionary with few methods
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Select(CsQuery.IDomDocument,System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Select from DOM using index. First non-class/tag/id selector will result in this being passed off to GetMatches
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.Selector)">
            <summary>
            Return all elements matching a selector, within a domain baseList, starting from list.
            </summary>
            <param name="baseList"></param>
            <param name="list"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.Matches(CsQuery.Engine.Selector,CsQuery.IDomObject,System.Int32)">
            <summary>
            Test 
            </summary>
            <param name="selector"></param>
            <param name="obj"></param>
            <param name="matchIndex"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetResultPositionMatches(System.Collections.Generic.IEnumerable{CsQuery.IDomObject},CsQuery.Engine.Selector)">
            <summary>
            Return all position-type matches. These are selectors that are keyed to the position within the selection
            set itself.
            </summary>
            <param name="list"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.GetPseudoClassMatches(CsQuery.IDomElement,CsQuery.Engine.Selector)">
            <summary>
            Return all child elements matching a DOM-position type selector
            </summary>
            <param name="elm"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.MatchesPseudoClass(CsQuery.IDomElement,CsQuery.Engine.PseudoClassType,System.String)">
            <summary>
            Return true if an element matches a specific DOM position-type filter
            </summary>
            <param name="elm"></param>
            <param name="type"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.CssSelectionEngine.InsertAttributeValueSelector(CsQuery.Engine.Selector)">
            <summary>
            Adds a new selector for just the attribute value. Used to chain with the indexed attribute exists selector.
            </summary>
            <param name="selector"></param>
        </member>
        <member name="P:CsQuery.Engine.CssSelectionEngine.Selectors">
            <summary>
            The current selection list being acted on
            </summary>
        </member>
        <member name="M:CsQuery.Web.WebForms.CreateFromRender(System.Web.UI.Page,System.Action{System.Web.UI.HtmlTextWriter},System.Web.UI.HtmlTextWriter,System.Web.HttpContext)">
            <summary>
            Creates a new CSQuery object from a Page.Render method. The base Render method of a page should be overridden,
            and this called from inside it to configure the CsQUery
            </summary>
            <param name="page">The current System.Web.UI.Page</param>
            <param name="renderMethod">The delegate to the base render method</param>
            <param name="writer">The HtmlTextWriter to output the final stream (the parameter passed to the Render method)</param>
        </member>
        <member name="T:CsQuery.Utility.SelectionSetComparer">
            <summary>
            A comparer to ensure that items are returned from a selection set in DOM order, e.g. by comparing their
            internal paths.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.StartNewSelector(CsQuery.Engine.SelectorType,CsQuery.Engine.CombinatorType,CsQuery.Engine.TraversalType)">
            <summary>
            Close the currently active selector. If it's partial (e.g. a descendant/child marker) then merge its into into the 
            new selector created.
            </summary>
            <param name="selectorType"></param>
            <param name="combinatorType"></param>
            <param name="traversalType"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.TryFinishSelector">
            <summary>
            Finishes any open selector, but if it was not finish, leaves current selector unaffected.
            Returns true if a selector was closed and a new selector started.
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorParser.FinishSelector">
            <summary>
            Finishes any open selector and clears the current selector
            </summary>
        </member>
        <member name="T:CsQuery.Engine.NthChild">
            <summary>
            Figure out if an index matches an Nth Child, or return a list of all matching elements from a list.
            </summary>
        </member>
        <member name="F:CsQuery.Engine.NthChild.IsJustNumber">
            <summary>
            When true, the current equation is just a number, and the MatchOnlyIndex value should be used directly
            </summary>
        </member>
        <member name="M:CsQuery.Engine.NthChild.IndexMatches(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Return true if the index matches the formula provided
            </summary>
            <param name="index"></param>
            <param name="formulaText"></param>
            <param name="onlyNodeName">Only include nodes of this type</param>
            <param name="fromLast">Count from the last element instead of the first</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetMatchingChildren(CsQuery.IDomElement,System.String,System.String,System.Boolean)">
            <summary>
            Return nth children that match type
            </summary>
            <param name="obj">The parent object</param>
            <param name="formula">The formula for determining n</param>
            <param name="onlyNodeName">The type of node to match</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetEffectiveChild(CsQuery.INodeList,System.Int32,System.Boolean)">
            <summary>
            Return the correct child from a list based on an index, and the fromLast setting
            </summary>
            <param name="nodeList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.GetEffectiveChild(CsQuery.INodeList,System.Int32)">
            <summary>
            Return the correct child from a list based on an index, and the current "FromLast" setting
            </summary>
            <param name="nodeList"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.NthChild.CheckForEvenOdd(System.String)">
            <summary>
            Replaces _Text with the correct equation for "even" and "odd"
            </summary>
            <param name="equation"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.NthChild.OnlyNodeName">
            <summary>
            Only nodes with this name will be included in the count to determine if an index matches the equation
            </summary>
        </member>
        <member name="P:CsQuery.Engine.NthChild.Text">
            <summary>
            The formula for this nth child selector
            </summary>
        </member>
        <member name="T:CsQuery.Engine.NthChild.CacheInfo">
            <summary>
            A structure to keep information about what has been calculated so far for a given equation string.
            NthChild is expensive so we cache a list of matching element IDs for a given equation along with the 
            last index this list represents and the iteration. The next time it's called we can either reference
            the list of matches so far, or update it only from the point where we stopped last time.
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.CharacterData">
            <summary>
            A static class to provide attribute information about characters, e.g. determining whether or not it
            belongs to a number of predefined classes. This creates an array of every possible character with a 
            ushort that is a bitmap (of up to 16 possible values, we can expand this to an int at some point if
            needed). This permits very fast access to this information since it only needs to be looked up
            via an index.
            
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.#cctor">
            <summary>
            Configuration of the xref of character info
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameStart(System.UInt16)">
            <summary>
            We omit ":" as a valid name start character because it makes pseudoselectors impossible to parse.
            </summary>
            <param name="hsb"></param>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.SetHtmlTagNameChar">
            <summary>
            Similar to above, we omit "." as a valid in-name char because it breaks chained CSS selectors.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.Closer(System.Char)">
            <summary>
            Return the closing character for a set of known opening enclosing characters
            (including single and double quotes)
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.CharacterData.MatchingBound(System.Char)">
            <summary>
            Return the matching bound for known opening and closing bound characters (same as Closer,
            but accepts closing tags and returns openers)
            </summary>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.IVariable.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.IVariable`1.Clone">
            <summary>
            Release stored value for this variable, causing it to be re-read from the owner
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.Clone">
            <summary>
            Abstract hooks for cloning. To allow more flexibility in inheriting part of the process
            (e.g. part of the code to copy the instance may be shared, but not instance-making code)
            it's split into two parts.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Operand.IsValidType(System.Type)">
            <summary>
            Since it isn't possible to have compile-time type checking for the generic implementation beyond
            IConvertible, allow implementations to define the types that are valid
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Operand.IsInteger">
            <summary>
            Indicates that this operand is either an integral type or contains an integral value. 
            That is, non-integral types containing integral values will still report true
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.IFunction.Name">
            <summary>
            The name of this variable
            </summary>
        </member>
        <member name="T:CsQuery.Web.IAsyncRequestQueue">
            <summary>
            A group of async web requests. 
            </summary>
            
        </member>
        <member name="T:CsQuery.Web.ICsqWebRequestMetadata">
            <summary>
            Data about a web request
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CsQuery.IDomInnerText" -->
        <member name="T:CsQuery.IDomText">
            <summary>
            Defines an interface for elements whose defintion (not innerhtml) contain non-tag or attribute formed data
            </summary>
        </member>
        <member name="M:CsQuery.HtmlParser.IterationData.Reset">
            <summary>
            Use this to prepare the iterator object to continue finding siblings. It retains the parent. It just avoids having to recreate
            an instance of this object for the next tag.
            </summary>
        </member>
        <member name="T:CsQuery.Utility.DomData">
            <summary>
            Utility functions 
            
            </summary>
        </member>
        <member name="F:CsQuery.Utility.DomData.pathIdLength">
            <summary>
            Length of each node's path ID (in characters), sets a limit on the number of child nodes before a reindex
            is required. For most cases, a small number will yield better performance. In production we probably can get
            away with just 1 (meaning a char=65k possible values). 
            </summary>
        </member>
        <member name="F:CsQuery.Utility.DomData.indexSeparator">
            <summary>
            The character used to separate the unique part of an index entry from its path. When debugging
            it is useful to have a printable character. Otherwise we want something that is guaranteed to be
            a unique stop character.
            </summary>
        </member>
        <member name="F:CsQuery.Utility.DomData.ClassAttrId">
            Hardcode some token IDs to improve performance of things that are referred to often
        </member>
        <member name="F:CsQuery.Utility.DomData.nextID">
            <summary>
            Fields used internally
            </summary>
        </member>
        <member name="M:CsQuery.Utility.DomData.NoInnerHtmlAllowed(System.UInt16)">
            <summary>
            This type does not allow HTML children. Some of these types may allow text but not HTML.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.NoInnerHtmlAllowed(System.String)">
            <summary>
            This type does not allow HTML children. Some of these types may allow text but not HTML.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.InnerTextAllowed(System.UInt16)">
            <summary>
            Text is allowed within this node type. Is includes all types that also permit HTML.
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.IsBoolean(System.UInt16)">
            <summary>
            The attribute is a boolean type
            </summary>
            <param name="nodeId"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.IsBoolean(System.String)">
            <summary>
            The attribute is a boolean type
            </summary>
            <param name="nodeName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.TokenID(System.String,System.Boolean)">
            <summary>
            Return a token ID for a name, adding to the index if it doesn't exist.
            When indexing tags and attributes, ignoreCase should be used
            </summary>
            <param name="tokenName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.TokenName(System.UInt16)">
            <summary>
            Return a token name for an ID.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.BaseXXEncode(System.Int32)">
            <summary>
            Encode to base XX (defined in constants)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.HtmlEncode(System.String)">
            <summary>
            HtmlEncode the string (pass-thru to system; abstracted in case we want to change)
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.AttributeEncode(System.String)">
            <summary>
            Encode text as part of an attribute
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.DomData.AttributeEncode(System.String,System.Boolean,System.String@)">
            <summary>
            Htmlencode a string, except for double-quotes, so it can be enclosed in single-quotes
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Utility.DomData.Keys">
            <summary>
            A list of all keys (tokens) created
            </summary>
        </member>
        <member name="T:CsQuery.ICssStyle">
            <summary>
            A single CSS style
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.MatchFunctions.CssClass(System.Int32,System.Char)">
            <summary>
            Matches a valid CSS class: http://www.w3.org/TR/CSS21/syndata.html#characters
            Does not currently deal with escaping though.
            </summary>
            <param name="index"></param>
            <param name="character"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.EquationParser.IFunction`1">
            <summary>
            T is the output type of the function.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:CsQuery.Utility.SmallDictionary`2">
            <summary>
            A lightweight dictionary for small lists. This is intended to boost performance for situations where we know the list
            will always be small (e.g. like HybridDictionary but even better since there's no need to check size ever). Performance
            testing could reveal that this doesn't affect performance much or it should just be implemented with a regular dictionary;
            I leave this is a different implementation than a standard dictionary so it can be easily changed in the future.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.EquationParser.Implementation.Utils.IsNumericType(System.Type)" -->
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNumericConvertible(System.Type)">
            <summary>
            Any primitive type that can be converted to a number, e.g. all except string. This just
            returns any primitive type that is not IEnumerable
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.EnsureOperand(System.IConvertible)">
            <summary>
            If the value is an operand, returns it, otherwise creates the right kind of operand
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.GetUnderlyingType(System.Type)">
            <summary>
            Return the proper type for an object (ignoring nullability)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Utils.IsNullableType(System.Type)">
            <summary>
            Returns true of the type is a generic nullable type OR string
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.DomText">
            <summary>
            Used for literal text (not part of a tag)
            </summary>
        </member>
        <member name="T:CsQuery.IDomInvalidElement">
            <summary>
            Sn element that will be rendered as text because it was determined to be a mismatched tag
            </summary>
        </member>
        <member name="T:CsQuery.Utility.DomStyles">
            <summary>
            A dictionary of valid styles, based on a Visual Studio format XML schema. 
            </summary>
        </member>
        <member name="T:CsQuery.Utility.JSON">
            <summary>
            Methods for working with JSON. 
            </summary>
            
        </member>
        <member name="M:CsQuery.Utility.JSON.ToJSON(System.Object)">
            <summary>
            Convert an object to JSON using the default handling of the serializer
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON``1(System.String)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String,System.Type)">
            <summary>
            Parse JSON into a typed object
            </summary>
            <param name="objectToDeserialize"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSON(System.String)">
            <summary>
            Parse JSON into a dynamic object, or single typed value
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String)">
            <summary>
            Parse a JSON value to a C# value (string,bool, int, double, datetime) or, if the value is another object, an object or array.
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONValue(System.String,System.Type)">
            <summary>
            Parse a JSON value to a C# value of the type requested
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonDate(System.String)">
            <summary>
            The value represents a JSON date (MS format)
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonObject(System.String)">
            <summary>
            The value represents a JSON object, e.g. is bounded by curly braces
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonString(System.String)">
            <summary>
            The value represents a JSON string, e.g. is bounded by double-quotes
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.IsJsonArray(System.String)">
            <summary>
            The value represents a JSON array, e.g. is bounded by square brackets
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.TryParseJsonValueImpl(System.String,System.Object@)">
            <summary>
            Try to parse a JSON value into a value type or, if the value represents an object or array, an object. This method does not
            address numeric types, leaving that up to a caller, so that they can map to specific numeric casts if desired.
            </summary>
            <param name="objectToDeserialize"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.JSON.ParseJSONObject(System.String)">
            <summary>
            Deserialize javscript, then transform to an ExpandObject
            </summary>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.IDomDocumentType">
            <summary>
            DOCTYPE node
            </summary>
        </member>
        <member name="T:CsQuery.Engine.Selector">
            <summary>
            A CSS selector parsed into it's component parts
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.Tag">
            <summary>
            Selection tag name
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.Criteria">
            <summary>
            This is really "parameters" and is used differently by different selectors. It's the criteria for attribute selectors;
            the node type for -of-type selectors, the equation for nth-child. For nth-of-type, its "type|equation"
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.Engine.Selector.PositionIndex" -->
        <member name="P:CsQuery.Engine.Selector.ChildDepth">
            <summary>
            For Child selectors, the depth of the child.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.SelectElements">
            <summary>
            The list of elements that should be matched, for elements selectors
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.SubSelectors">
            <summary>
            A list of subselectors. The results of this are used as criteria for a primary selector, e.g. has or not.
            </summary>
        </member>
        <member name="P:CsQuery.Engine.Selector.IsResultListPosition">
            <summary>
            Indicates that a position type selector refers to the result list, not the DOM position
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Engine.Selector.NoIndex">
            <summary>
            When true do not attempt to use the index to obtain a result from this selector. Used for automatically 
            generated filters
            </summary>
        </member>
        <member name="T:CsQuery.Engine.PseudoClassType">
            <summary>
            Position-type selectors match one or more element children of another element. The selection engine can either access all 
            matching children, or test a particular element for matching a selector
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.EquationParser.Error">
            <summary>
            Error (if any) that occurred while parsing
            </summary>
        </member>
        <member name="F:CsQuery.Promises.WhenAll.Success">
            <summary>
            When false, means one or more of the promises was rejected, and the All will be rejected
            </summary>
        </member>
        <member name="T:CsQuery.OutputFormatters.FormatPlainText">
            <summary>
            Removes all extraneous whitespace
            </summary>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsNthChild(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsNthLastChild(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IndexOfTypeOnly(CsQuery.IDomElement,System.String,System.Boolean)">
            <summary>
            Return the index of obj within its siblings, including only elements with the same node name
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.NthChilds(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.NthLastChilds(CsQuery.IDomElement,System.String)">
            <summary>
            Criteria should be the formula, optionally preceded by a node type filter e.g. "span|2n"
            </summary>
            <param name="elm"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.OnlyOfTypeImpl(CsQuery.IDomObject)">
            <summary>
            When there's no type, it must return all children that are the only one of that type
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsEmpty(CsQuery.IDomObject)">
            <summary>
            Element nodes and non-empty text nodes are considered to be children; empty text nodes, comments,
            and processing instructions don’t count as children. A text node is considered empty if it has a data 
            length of zero; so, for example, a text node with a single space isn’t empty.
            </summary>
            <param name="elm"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Empty(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all child nodes that are empty
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.IsParent(CsQuery.IDomObject)">
            <summary>
            Return true of the node is a parent.
            Element nodes and non-empty text nodes are considered to be children; empty text nodes, comments,
            and processing instructions don’t count as children. A text node is considered empty if it has a data 
            length of zero; so, for example, a text node with a single space isn’t empty.
            </summary>
            <param name="elm"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Engine.PseudoSelectors.Visible(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Return all child nodes that are visible
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CsQuery.Engine.PseudoSelectors.IsVisible(CsQuery.IDomObject)" -->
        <member name="M:CsQuery.Engine.PseudoSelectors.Enumerate(CsQuery.IDomObject)">
            <summary>
            Yield nothing if obj is null, or the object if not
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.DomElement">
            <summary>
            HTML elements
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.Render(System.Text.StringBuilder,CsQuery.DomRenderingOptions)">
            <summary>
            Returns the completel HTML for this element and its children
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.ElementHtml">
            <summary>
            Returns the HTML for this element, but ignoring children/innerHTML
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.IndexKeys">
            <summary>
            Returns all the keys that should be in the index for this item (keys for class, tag, attributes, and id)
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.AddStyle(System.String)">
            <summary>
            Add a single style in the form "styleName: value"
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.SetAttribute(System.String)">
            <summary>
            Sets an attribute with no value
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String)">
            <summary>
            Gets an attribute value, or returns null if the value is missing. If a valueless attribute is found, this will also return null. HasAttribute should be used
            to test for such attributes. Attributes with an empty string value will return String.Empty.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value of an attribute or a default value if it could not be found.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.DomElement.RenderAttribute(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            TODO this really should be in Attributes
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.NodeName">
            <summary>
            The NodeName for the element (upper case).
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Type">
            <summary>
            TODO: in HTML5 type can be used on OL attributes (and maybe others?) and its value is
            case sensitive. The Type of input elements is always lower case, though. This behavior
            needs to be verified against the spec
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Name">
            <summary>
            For certain elements, the Name. TODO: Verify attribute is applicable.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Value">
            <summary>
            Value property for some node types (input,textarea)
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHtmlAllowed">
            <summary>
            This object type can have inner HTML.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Complete">
            <summary>
            True if this element is valid (it needs a tag only)
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Item(System.String)">
            <summary>
            Returns the value of the named attribute
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.InnerHTML">
            <summary>
            Returns text of the inner HTML. When setting, any children will be removed.
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.ElementIndex">
            <summary>
            The index excluding text nodes
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IndexReference">
            <summary>
            The object to which this index refers
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.IsBlock">
            <summary>
            Returns true if this element is a block-trpe element
            </summary>
        </member>
        <member name="P:CsQuery.Implementation.DomElement.Classes">
            <summary>
            All class names present for this element
            </summary>
        </member>
        <member name="T:CsQuery.Web.CsQueryHttpContext">
            <summary>
            Server extension to CsQuery -- adds functionality for dealing with postbacks, and getting data from 
            external sources
            </summary>
        </member>
        <member name="M:CsQuery.Web.CsQueryHttpContext.WriteJson(System.String,System.Object)">
            <summary>
            Write json data to a global variable
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:CsQuery.Implementation.DomDocumentType">
            <summary>
            A special type for the DOCTYPE node
            </summary>
        </member>
        <member name="T:CsQuery.Implementation.DomFragment">
            <summary>
            Special node type to represent the DOM.
            THIS IS NOT USED YET
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.Clone">
            <summary>
            The values set (on order that each variable appears first in the equation) for each varaiable
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.SetVariable(System.String,System.IConvertible)">
            <summary>
            Sets the value used for a variable when the function is next run
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Equation.GetValue(System.IConvertible[])">
            <summary>
            Set the paramenters in order to the values passed, and returns the result of the equation
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.VariableValues">
            <summary>
            The names of the variables in the order added. For functions (where the parameters are passed only by order)
            this is important. Probably could move this to the Function implementation
            but it requires overriding everything, almost easier to keep it here.
            </summary>
        </member>
        <member name="P:CsQuery.EquationParser.Implementation.Equation.Operand">
            <summary>
            The root operand for the equation. The equation must not be changed once set, or variables will not be bound.
            </summary>
        </member>
        <member name="T:CsQuery.ExtensionMethods.ExtensionMethods">
            <summary>
            Some extension methods that come in handy when working with CsQuery
            </summary>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.RegexTest(System.String,System.String)">
            <summary>
            Test whether the regular expression pattern matches the string
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.CloneList(System.Collections.IEnumerable)">
            <summary>
            (Alpha) Clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.CloneList(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            (Alpha) Deep clone a sequence of objects.
            </summary>
            <param name="obj"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ToJSON(System.Object)">
            <summary>
            Serailize the object to a JSON string
            </summary>
            <param name="objectToSerialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON``1(System.String)">
            <summary>
            Deserialize the JSON string to a typed object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.ParseJSON(System.String)">
            <summary>
            Deserialize the JSON string to an ExpandoObject or value type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectToDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.HasProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Indicates whether a property exists on an ExpandoObject
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.ExtensionMethods.ExtensionMethods.Get``1(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Return a yped value from an ExpandoObject
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.CreateElements(System.String)">
            <summary>
            No literals allowed
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.CreateElement(System.String)">
            <summary>
            returns a single element, any html is discarded after that
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.CreateObjects(System.String)">
            <summary>
            Returns a list of unbound elements created by parsing the string. Even if Document is set, this will not return bound elements.
            </summary>
            <param name="html"></param>
            <param name="allowLiterals"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.CreateObjects(System.Char[])">
            <summary>
            Returns a list of unbound elements created by parsing the string. Even if Document is set, this will not return bound elements.
            </summary>
            <param name="html"></param>
            <param name="allowLiterals"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.CreateObjects">
            <summary>
            Returns a list of elements from the bound Document
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.Parse(System.Boolean)">
            <summary>
            When CsQuery is provided, an initial indexing context can be used
            </summary>
            <param name="csq"></param>
            <param name="allowLiterals"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.GetLiteral(CsQuery.HtmlParser.IterationData)">
            <summary>
            Returns a literal object for the text between HtmlStart (the last position of the end of a tag) and the current position.
            If !AllowLiterals then it's wrapped in a span.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.MoveOutsideTag(CsQuery.HtmlParser.IterationData)">
            <summary>
            Move pointer to the first character after the closing caret of this tag. 
            </summary>
            <returns>
            Returns True if there are children
            </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.GetCloseTag(CsQuery.HtmlParser.IterationData)">
            <summary>
            Start: Expects the position to be after an opening caret for a close tag, and returns the tag name.
            End: Position after closing caret
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.GetTagAttribute(CsQuery.HtmlParser.IterationData)">
            <summary>
            Start: Position inside a tag opening construct
            End: position after last character of tag construct {x=["|']y["|]]} or just {x}) and adds attribute if successful
                 position ON closing caret of tag opener if failed
            </summary>
            <param name="current"></param>
            <returns>
            Returns true if an attribute was added, false if no more attributes were found
            </returns>
        </member>
        <member name="M:CsQuery.HtmlParser.DomElementFactory.GetTagOpener(CsQuery.HtmlParser.IterationData)">
            <summary>
            Start: the opening caret of a tag
            End: the first stop character (e.g. space after the tag name)
            </summary>
            <param name="current"></param>
            <returns>Tag name</returns>
        </member>
        <member name="T:CsQuery.Utility.RangeSortedDictionary`1">
            <summary>
            A dictionary that is substring-lookup capable. This is the data structure used to index HTML documents for selectors.
            A SortedSet of keys is used for the index because it allows fast access by substring. A list of keys obtained from the
            SortedSet for a selector is used to obtain the target references from a regular dictionary.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:CsQuery.Utility.IRangeSortedDictionary`1">
            <summary>
            A sorted dictionary that allows lookup by range.
            </summary>
        </member>
        <member name="M:CsQuery.Utility.IRangeSortedDictionary`1.GetRangeKeys(System.String)">
            <summary>
            Return all keys starting with subKey
            </summary>
            <param name="subKey">The substring to match</param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.IRangeSortedDictionary`1.GetRange(System.String)">
            <summary>
            Return all values having keys beginning with subKey
            </summary>
            <param name="subKey"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Utility.RangeSortedDictionary`1.GetRange(System.String,System.Int32,System.Boolean)">
            <summary>
            Return only keys at depth. Zero is the matching key.
            </summary>
            <param name="subKey"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.StartAsyncWebRequest(System.String,System.Action{CsQuery.Web.ICsqWebResponse},System.Action{CsQuery.Web.ICsqWebResponse},CsQuery.Web.ServerConfig)">
            <summary>
            Start an async request, and return a unique ID that identifies it.
            </summary>
            <param name="url"></param>
            <param name="success"></param>
            <param name="fail"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.AsyncWebRequestManager.WaitForAsyncEvents(System.Int32)">
            <summary>
            Waits until all async events have completed. Use for testing primarily as a web app should not stop normally.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.AllowQuoting">
            <summary>
            Causes the next action to permit quoting -- if the first character is a quote character, stop characters between there
            and the next matching quote character will be ignored.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ToNewScanner">
            <summary>
            Creates a new stringscanner instance from the current match
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ToNewScanner(System.String)">
            <summary>
            Creates a new stringscanner instance from the current match, formatted using passed format first.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.Is(System.String)">
            <summary>
            returns true of the text starting at the current position matches the passed text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.SkipWhitespace">
            <summary>
            If the current character is whitespace, advances to the next non whitespace. Otherwise, nothing happens.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.NextNonWhitespace">
            <summary>
            Advances to the next non-whitespace character
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.Next(System.Int32)">
            <summary>
            Moves pointer forward one character, or to the position after the next match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.Undo">
            <summary>
            Returns to the state before the last Expect. This is not affected by manual Next/Prev operations
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ExpectChar(System.Char)">
            <summary>
            If current character (or next non-whitespace character) is not the expected value, then an error is thrown
            </summary>
            <param name="character"></param>
            <returns></returns>
            
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ExpectChar(System.Collections.Generic.IEnumerable{System.Char})">
            If one of the current characters (or next non-whitespace character) is not the expected value, then an error is thrown
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ExpectNumber">
            <summary>
            Starting with the current character, treats text as a number, seeking until the next character that would terminate a valid number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ExpectAlpha">
            <summary>
            Starting with the current character, seeks until a non-alpha character is found
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.Expect(CsQuery.StringScanner.IExpectPattern)">
            <summary>
            Continue seeking as long as the delegate returns true.
            </summary>
            <param name="validate">
            A function accepting parameters int, CharacterInfo, char[] and returning bool.
            int is the index of the matching string starting with 0
            CharacterInfo is a wrapper for the current character
            char[] is the remainder of the string starting at Pos
            </param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.Expect(System.Func{System.Int32,System.Char,System.Boolean})">
            <summary>
            Continue seeking as long as the delegate returns True
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.GetBoundedBy(System.Char,System.Boolean)">
            <summary>
            The single character bound will be matched with a closing char for () [] {} &lt;&gt; or the same char for anything else
            </summary>
            <param name="bound"></param>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.ExpectImpl(CsQuery.StringScanner.IExpectPattern,System.Boolean)">
            <summary>
            The implementation - if the 2nd parm is false, it is the opposite (seek until the match condition is met)
            2nd parm NOT IMPLEMENTED
            </summary>
            <param name="validate"></param>
            <param name="untilTrue"></param>
        </member>
        <member name="F:CsQuery.StringScanner.Implementation.StringScanner.cachedPos">
            <summary>
            Caches the current position
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.CachePos">
            <summary>
            Cache the last pos before an attempted operation,
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.NewPos(System.Int32)">
            <summary>
            Sets the current position, updates the last pos from cache, and clears any current match. If the cached position is the same
            as the current position, nothing is done.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.Implementation.StringScanner.RestorePos">
            <summary>
            Restores position from cache
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.QuotingActive">
            <summary>
            When true, the next seek should honor quotes
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:CsQuery.StringScanner.Implementation.StringScanner.NextChar" -->
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.Match">
            <summary>
            The string or character that has been matched
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.LastMatch">
            <summary>
            The string or character matched prior to last operation
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.Finished">
            <summary>
            The current position is after the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.AtEnd">
            <summary>
            The current position is on the last character
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Implementation.StringScanner.Info">
            <summary>
            The character at the current position is alphabetic
            </summary>
        </member>
        <member name="M:CsQuery.Engine.SelectorChain.#ctor(System.String)">
            <summary>
            Create a new selector from any string
            </summary>
            <param name="selector"></param>
        </member>
        <member name="M:CsQuery.Engine.SelectorChain.#ctor(System.Collections.Generic.IEnumerable{CsQuery.IDomObject})">
            <summary>
            Create a new selector from DOM elements
            </summary>
            <param name="elements"></param>
        </member>
        <member name="T:CsQuery.Web.ServerConfig">
            <summary>
            Configuration opttions used when accessing remote resources
            </summary>
        </member>
        <member name="M:CsQuery.INodeList.AddAlways(CsQuery.IDomObject)">
            <summary>
            Add a node but do not attempt to clean up duplicate IDs or remove it from an existing DOM. This is required for the parser, but normally
            when you are using "Add" you want it to removed the ID from disconnected elements. This can also result in nodes appearing in more than
            one place in the DOM and should generally not be used by clients.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.Number.RequireWhitespaceTerminator">
            <summary>
            Normally true
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.Bounded">
            <summary>
            Matches anything that is bounded by acceped bounding characters
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods">
            <summary>
            Extension methods used by CsQuery but not specialized enough to be considered useful for clients; therefore
            in a separate namespace.
            </summary>
        </member>
        <member name="M:CsQuery.StringScanner.ExtensionMethods.ExtensionMethods.SubstringBetween(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the text between startIndex and endIndex (exclusive of endIndex)
            </summary>
            <param name="text"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.Equations.CreateEquationOperand(System.String)">
            <summary>
            Create an operand by parsing a string. Like CreateEquation but does not wrap in an Equation object.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Add(CsQuery.IDomObject)">
            <summary>
            Add a child to this element 
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.AddAlways(CsQuery.IDomObject)">
            <summary>
            Add a child without validating that a node is a member of this DOM already or that the ID is unique
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Insert(System.Int32,CsQuery.IDomObject)">
            <summary>
            Adds a child element at a specific index
            </summary>
            <param name="index"></param>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.RemoveAt(System.Int32)">
            <summary>
            Remove an item from this list and update index.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Remove(CsQuery.IDomObject)">
            <summary>
            Remove an element from this element's children
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:CsQuery.Implementation.NodeList.Clear">
            <summary>
            Remove all children of this node
            </summary>
        </member>
        <member name="M:CsQuery.Implementation.DomAttributes.Set(System.String,System.String)">
            <summary>
            Adding an attribute implementation
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomAttributes.Set(System.UInt16,System.String)">
            <summary>
            Second to last line of defense -- will call back to owning Element for attempts to set class, style, or ID, which are 
            managed by Element.
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomAttributes.SetRaw(System.UInt16,System.String)">
            <summary>
            Used by DomElement to (finally) set the ID value
            </summary>
            <param name="tokenId"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomAttributes.SetBooleanAttribute(System.String)">
            <summary>
            Sets a boolean only attribute having no value
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:CsQuery.Implementation.DomAttributes.Unset(System.String)">
            <summary>
            Removing an attribute implementation
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:CsQuery.Implementation.DomInnerText">
            <summary>
            Used for literal text (not part of a tag)
            </summary>
        </member>
        <member name="M:CsQuery.EquationParser.Implementation.Literal`1.SetConvert(System.IConvertible)">
            <summary>
            This is static so it can be used by the constructors -- sets the value of the strongly typed instance
            </summary>
            <param name="literal"></param>
            <param name="value"></param>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Get">
            <summary>
            Initiate an http GET request
            </summary>
            <returns></returns>
        </member>
        <member name="M:CsQuery.Web.CsqWebRequest.Post">
            <summary>
            Initiaite an http POST request
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:CsQuery.Utility.JsonSerializer" -->
        <member name="F:CsQuery.Utility.JsonSerializer._Serializer">
            <summary>
             The real serializer implementation. We need to set up a DI contiainer to manage this (see todo above)
            </summary>
        </member>
        <member name="T:CsQuery.StringScanner.Patterns.OptionallyQuoted">
            <summary>
            Match an attribute value. Should be quoted but doesn't have to be.
            </summary>
        </member>
        <member name="P:CsQuery.StringScanner.Patterns.OptionallyQuoted.Terminators">
            <summary>
            When unquoted, this will terminate the string
            </summary>
        </member>
        <member name="F:CsQuery.EquationParser.Implementation.Variable._Value">
            <summary>
            The value has been obtained. When true, the cached value will be used instead of requerying. Clear() resets this.
            </summary>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`2">
            <summary>
            Default implementation of OrderedDictionary-T,TKey,TValue-
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:CsQuery.EquationParser.OrderedDictionary`3">
            <summary>
            A dictionary that also maintains the order added.
            </summary>
            <typeparam name="T">The concrete type of dictionary to use for the inner dictionary</typeparam>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.IndexOf(`1)">
            <summary>
            This class is optimized for access by numeric index, or accessing an object by key. If there's a frequent 
            need to obtain the numeric index from the key then this should have another dictionary added to xref.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CsQuery.EquationParser.OrderedDictionary`3.Insert(System.Int32,`2)">
            <summary>
            Insert an item by value only. Dup values are possible this way, it will have a key equal to the string of its index.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:CsQuery.EquationParser.OrderedDictionary`3.Item(`1)">
            <summary>
            Setting uses indexOf - not optimized.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
    </members>
</doc>
